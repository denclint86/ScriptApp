[A.ahk]
A_Put(ByRef Array, ByRef Data, Index=-1, dSize=-1)
A_Get(ByRef Array, Index)
A_Implode(ByRef Array, glue=" ")
A_Explode(ByRef Array, dString, sString, Limit=0, trimChars="", trimCharsIsRegEx=False, dStringIsRegEx=False)
A_Del(ByRef Array, Item=-1)
A_Pop(ByRef Array)
A_Shift(ByRef Array)
A_Swap(ByRef Array, IdxA, IdxB)
A_Slice(ByRef Array, ByRef sArray, Start, End)
A_Merge(Byref Array, ByRef sArray)
A_Array(byRef Array)
A_Count(byRef Array)
A_Init(byRef Array)
A_Size(ByRef Array)
A_Length(ByRef Array)
A_Dump(ByRef Array)
A_ArrayMM(Target, Source, Length)
A___ArrayBin(ByRef Array,offset,length)
A___ArrayInsideView(Array)


[Acc.ahk]
Acc_Init()
Acc_ObjectFromEvent(ByRef _idChild_, hWnd, idObject, idChild)
Acc_ObjectFromPoint(ByRef _idChild_ = "", x = "", y = "")
Acc_ObjectFromWindow(hWnd, idObject = -4)
Acc_WindowFromObject(pacc)
Acc_GetRoleText(nRole)
Acc_GetStateText(nState)
Acc_SetWinEventHook(eventMin, eventMax, pCallback)
Acc_UnhookWinEvent(hHook)
	WinEventProc(hHook, event, hWnd, idObject, idChild, eventThread, eventTime)
	
Acc_Role(Acc, ChildId=0)
Acc_State(Acc, ChildId=0)
Acc_Location(Acc, ChildId=0, byref Position="")
Acc_Parent(Acc)
Acc_Child(Acc, ChildId=0)
Acc_Query(Acc)
Acc_Error(p="")
Acc_Children(Acc)
Acc_ChildrenByRole(Acc, Role)
Acc_Get(Cmd, ChildPath="", ChildID=0, WinTitle="", WinText="", ExcludeTitle="", ExcludeText="")


[AccViewer.ahk]
BuildTreeView()
GetAccInfo()
UpdateAccInfo(Acc, ChildId, Obj_Path="")
GetClassNN(Chwnd, Whwnd)
GetClassNN_EnumChildProc(hwnd, lparam)
TV_Expanded(TVid)
TV_BuildAccChildren(AccObj, Parent, Selected_Child="", Flag="")
GetAccPath(Acc, byref hwnd="")
GetEnumIndex(Acc, ChildId=0)
GetAccLocation(AccObj, Child=0, byref x="", byref y="", byref w="", byref h="")
WM_MOUSEMOVE()
	__New(id)
__delete()
	__New(color="red")
	Show(x1, y1, x2, y2, sides="TRBL")
	Hide()
	SetAbove(hwnd)
	Transparent(param)
	Color(color)
	Destroy()
CColor(Hwnd, Background="", Foreground="")
CColor_(Wp, Lp, Msg, Hwnd)
CrossHair(OnOff=1)
	Acc_Init()
	
	Acc_ObjectFromEvent(ByRef _idChild_, hWnd, idObject, idChild)
	
	Acc_ObjectFromPoint(ByRef _idChild_ = "", x = "", y = "")
	
	Acc_ObjectFromWindow(hWnd, idObject = 0)
	
	Acc_WindowFromObject(pacc)
	
	Acc_GetRoleText(nRole)
	
	Acc_GetStateText(nState)
	
	Acc_Role(Acc, ChildId=0)
	
	Acc_State(Acc, ChildId=0)
	
	Acc_Children(Acc)
	
	Acc_Location(Acc, ChildId=0)
	
	Acc_Parent(Acc)
	
	Acc_Child(Acc, ChildId=0)
	
	Acc_Query(Acc)
	
Anchor(i, a = "", r = false)


[AHK-Studio.ahk]
About()
Activate(a,b,c,d*)
Add_Selected_To_Personal_Variables()
Add_Selected_To_Project_Specific_AutoComplete()
Add_Space_Before_And_After_Commas()
Add_Tracked_Folder()
AddBookmark(line,search)
AddInclude(FileName:="",text:="",pos:="",Show:=1)
Additional_Library_Folders()
AddMissing()
AHK(jsObj)
Allowed()
Auto_Insert()
AutoClass()
AutoMenu()
Backspace(sub:=1)
BookEnd(add,hotkey)
BraceHighlight()
BraceSetup(Win:=1)
Camel()
Center(win)
CenterSel()
Check_For_Edited()
Check_For_Update_Get_Info(Startup,Branch,ID)
Check_For_Update(startup:="")
CheckLayout()
CheckOpen()
Choose_Color(Color,hwnd:="")
	Add(type,found,Node:="")
	Commit()
	ConvertStyle()
	__New()
	Register(Control,HWND,Label,win:=1,ID:="")
	__New(window,info:="{Notify:Pos}")
	__New(NewWin)
	__Get()
	__New()
	__New(obj,hwnd,win,pos:="xy",min:=300,Function:="",Reload:="")
	__New()
	Add(line,state)
	__New()
	__New()
	__New()
	__Call(x*)
	__New(window,info)
	__New(Refresh:=0)
	__New()
	__New(Tab:="")
	Init()
	Current()
	Start(ID)
	Stop(ID)
	__New(win,pos,id:="",node:="")
	__New()
	__New()
	__Get(x="")
Clean_Position_Data()
Clean(Clean,tab="")
Clear_History()
Clear_Line_Status()
Clear_Selected_Highlight()
ClipboardRTF(File)
Close_All()
Close_Debug_Window()
Close(x:=1,all:="",Redraw:=1)
CloseSingleUntitled()
Color(con:="",Language:="",FromFunc:="")
ColorInt(Color)
Combine(Atts,Found)
Command_Help()
Compile_AHK_Studio()
Compile_Using_U32()
Compile(Main="")
CompileFont(XMLObject,RGB:=1)
Context(return="")
ContextMenu()
Convert_Hotkey(key)
ConvertTheme()
Copy_File_Path()
Copy_Folder_Path()
Copy_Selected_Text_To_RTF()
Copy()
Create_Comment()
Create_Function_From_Selected()
Create_Include_From_Selection()
Create_Toolbar()
CSC(set:=0)
Current(Parent="")
Custom_Indent()
Custom_Version()
Cut()
Debug_Current_Script()
DebugHighlight()
DebugWindow(Text,Clear:=0,LineBreak:=0,Sleep:=0,AutoHide:=0)
Default_Project_Folder()
Default(Control:="SysTreeView321",win:=1)
DefaultFont(Return:=0)
DefaultRCM(Return:=0)
Delete_Line()
Delete_Matching_Brace()
Delete_Project(x:=0)
Delete()
DeleteExtraFiles(FileList,DD)
Display_Classes()
Display_Functions()
Display_Hotkeys()
Display(PopulateVarBrowser:=0)
DisplayStats(call)
DisplayType(type)
Dlg_Color(Node,Default:="",hwnd:="",Attribute:="color")
DLG_FileSave(HWND:=0,DefaultFilter=0,DialogTitle="Select file to open",DefaultFile:="",Flags:=0x00000002,ForceFile:=0)
Dlg_Font(Node,DefaultNode:="//theme/default",window="",Attribute:="color",Effects=1)
Donate()
Download_AHK_Studio_Source()
Download_Plugins()
Duplicate_Line()
Duplicates()
DynaRun(Script,Wait:=true,name:="Untitled")
Edit_Comment_Insert()
Edit_Highlight_Colors()
Edit_Hotkeys(ret:="")
Edit_Plugin()
Edit_Proxy_Server()
Edit_Replacements()
Edited(current:="")
EditHotkey(node,window)
Enable(Control,label:="",win:=1)
Encode(TT,ByRef Text,Encoding:="UTF-8")
EncodeFile(fn,time,nn,branch)
Enter()
ES(Script,Wait:=true)
Escape(a*)
ET(TT,Encoding:="UTF-8")
ExecScript()
Exit(ExitApp:=0)
ExitStudio()
Export()
Extract(Main)
FEAdd(value,parent:=0,options:="")
FEUpdate(Redraw:=0)
FileCheck(file:="")
Find_Replace()
Find()
Fix_Case_In_Current_Include()
	__New()
Fix_Indent()
FixIndentArea()
FixLines(line,total,base:="")
Fold_All()
FontInfo(Style)
Foo(Script,Wait:=true)
FormatTime(format,time)
Forum()
Full_Backup(Remove:=0)
GetClass(class,current:="")
GetClassText(EA,SearchText,Type:="Class",ReturnClass:=0)
GetControl(Ctrl)
GetCurrentClass()
GetExtensionList(Language)
GetFileNode(Node,Att:="")
GetFind(Text)
GetID(Clear:=0)
GetInclude()
GetLanguage(sc:="")
GetMainNode(File,Parent:="")
GetOmni(Ext)
GetOmniOrder(Ext)
GetOmniText(Ext)
GetOTB(search)
GetPos(Node:=0)
GetRange(start,otext)
GetSearchRegex(FindSearch,Text,Replace:="Text")
GetTemplate()
GetTotal(obj,line)
GetWebBrowser()
Go_To_Line()
Google_Search_Selected()
Goto()
GotoPos(caret,pos)
Gui()
Header(type)
Highlight_Selected_Area()
Highlight_to_Matching_Brace()
HltLine()
Hotkeys(win:=1,keys:="")
HWND(Win,HWND="")
Icons(il,icons,file,icon)
Include(MainFile,File)
Increment()
Indent_Selected_Area()
IndentFrom(line)
Index_Lib_Files(Index:="")
InputBox(Parent,Title,Prompt,Default="")
Insert_Color_Code()
Insert_Current_Time()
InsertAll(text,add)
InsertDebugMessage()
InsertMultiple(Caret,CPos,Text,End)
Jump_To_First_Available()
Kill_Process()
LanguageFromFileExt(Ext)
LastFiles()
LButton(a*)
List_Variables()
m(x*)
Make_One_Line()
MakeRTF(Text,Colors)
Manage_File_Types()
Margin_Left(set:=0)
MarginWidth(sc="")
Menu_Help()
Menu_Search()
Menu(MenuName:="main")
MenuActions()
Menus()
MenuWipe(x:=0)
MissingPlugin(file,menuname)
Monitors()
Move_Matching_Brace()
Move_Selected_Lines_Down()
Move_Selected_Lines_Up()
Move_Selected_Word_Left()
Move_Selected_Word_Right()
MoveSelectedWord(Add)
New_Caret_Above()
New_Caret_Below()
New_Caret(add)
New_File_Template()
New_Include_From_Current_Word()
New_Include()
New_Plugin()
New(FileName:="",text:="",Select:=1)
NewIndent(indentwidth:="")
NewLines(text)
Next_File()
Next_Found()
Next_Project()
Notifications(a*)
Notify(csc*)
Obj2String(Obj,FullPath:=1,BottomBlank:=0)
ObjRegisterActive(Object,CLSID:="{DBD5A90A-A85C-11E4-B0C7-43449580656B}",Flags:=0)
Omni_Search(start="")
One_Backup()
Online_Help()
Open(FileList="",Show="",Redraw:=1)
OpenHelpFile(url)
Options(x:=0)
ParseJson(jsonStr)
Paste()
PDX()
PERefresh()
Personal_Variable_List()
Plug(Refresh:=0)
PosInfo()
Previous_File()
Previous_Found()
Previous_Project()
Previous_Scripts(FileName="")
ProcessDebugXML()
ProcessText(text,process)
Project_Properties()
Project_Specific_AutoComplete()
Publish(Return="",Branch:="",Version:="")
PublishIndent(Code,Indent:="`t",Newline:="`r`n")
QF(x:=0)
Quick_Find_Ignore()
Quick_Options()
Quick_Scintilla_Code_Lookup()
RButton()
Redo()
Redraw()
Refresh_Code_Explorer(Project:=0)
Refresh_Current_File()
Refresh_Plugins()
RefreshThemes(RefreshColor:=0)
Regex_Replace_Selected_Dialog()
Regex_Replace_Selected()
RegexSettings()
RegisterID(CLSID,APPID)
RelativePath(main,new)
ReloadStudio()
Remove_Current_Selection()
Remove_Include()
Remove_Scintilla_Window()
Remove_Spaces_From_Selected()
RemoveComment(text)
RemoveTrackedFile()
RemoveXMLBackups()
Rename_Current_Include(current:="")
Replace_Selected()
Replace()
ReplaceText(start,end,text)
Report_Bugs()
Reset_Zoom()
Restore_Current_File()
RGB(c)
Right_Click_Menu_Editor(menu)
Run_As_Ansii()
Run_As_U32()
Run_As_U64()
Run_As(exe)
Run_Comment_Block()
Run_Program()
Run_Selected_Text()
Run()
SanitizePath(File)
Save_As()
Save(Option="")
SaveGUI(win:=1)
Scan_Line(text:="")
ScanChildren()
ScanFiles(Refresh:=0)
ScanParent(Text,b)
Scintilla_Code_Lookup()
Scintilla_Control()
Scintilla()
Scratch_Pad()
ScrollWheel()
Search_Label()
SearchFor(b,Pos1)
SearchWin(node:="")
Select_Current_Word()
Select_Next_Duplicate()
SelectAll()
SelectDebugLine(line)
SelectFile(FileName:="",Title:="New File",Ext:="",Options:="S16",Force:=0)
SelectText(Item,Node:=0)
Set_As_Default_Editor()
Set_New_Include_File_Default_Folder()
SetPos(oea:="")
SetScan(Line,Return:=0)
SetStatus(text,part="")
SetTimer(timer,Duration:="-10")
SetTimers(Timers*)
SettingsDefault(id,return:=0)
Setup(window,nodisable="")
SetupEnter(On:=0)
SetWords(hyphen:=0)
Show_Class_Methods(object,search:="")
Show_Folder_In_Explorer()
Show_Scintilla_Code_In_Line()
ShowAutoComplete()
ShowLabels(x:=0)
ShowMainWindow()
ShowOSD(show)
ShowWindowSpy()
Sleep(Time:="-10")
Split_Line_By_Comma()
SplitPath(File)
Spoons(a*)
Start_Select_Character()
Step_Into()
Step_Out()
Step_Over()
Stop_Debugger()
StripError(text,fn)
Switch_Focus()
t(x*)
Tab_To_Next_Comma()
Tab_To_Previous_Comma()
Tab_Width()
Test_Plugin()
Testing()
Theme()
Toggle_Comment_Line()
Toggle_Multiple_Line_Comment()
ToggleDuplicate()
ToggleMenu(Label)
Toolbar_Editor(control)
tv(tv*)
TVIcons(x:="")
TVState(x:=0)
UnderlineDuplicateWords()
Undo()
UnSaved()
Update_Github_Info()
Update(Info)
UpdateBranches(a*)
		UpdateBranches()
UpdateMethod(Add,node)
Upper(text)
UpPos(NoContext:=0)
URIDecode(str)
URLDownloadToVar(URL)
VarBrowser()
Version_Tracker()
VersionDropFiles(FileList,Ctrl,x,y,Object)
WinActivate(win)
WinPos(hwnd)
WinSetTitle(win:=1,Title:="AHK Studio",Open:=0)
Words_In_Document(NoDisplay:=0,Text:="",Remove:="",AllowLastWord:=0)
Wrap_Word_In_Quotes()
XMLSearchText(Attributes,Search)


[AHKA-gamecount doesnt work.ahk]
AA_Spawn()
AA_Refresh()
AA_DrawUnit(unit)
AA_endturn()
AA_SpawnMineral()
AA_Gather(unit)


[AHKarena_v1.03.ahk]
AA_Spawn()
AA_Refresh()
AA_DrawUnit(unit)
AA_endturn()
AA_SpawnMineral()
AA_Gather(unit)


[AHKarena_v1.031 Dynamic Include.ahk]
AA_Spawn()
AA_Refresh()
AA_DrawUnit(unit)
AA_endturn()
AA_SpawnMineral()
AA_Gather(unit)


[AHKarena_v1.1.ahk]
AA_Spawn()
AA_Refresh()
AA_DrawUnit(unit)
AA_endturn()
AA_SpawnMineral()
AA_Gather(unit)


[AHKarena_v1.2.ahk]
AA_Spawn()
AA_Refresh()
AA_DrawUnit(unit)
AA_endturn()
AA_SpawnMineral()
AA_Gather(unit)


[AHKarena_v2.0.ahk]
AA_Spawn()
AA_Refresh()
AA_DrawUnit(unit)
AA_endturn()
AA_SpawnMineral()
AA_Gather(unit)


[AHKarena_v2.01.ahk]
AA_Spawn()
AA_Scan()
AA_Refresh()
AA_DrawUnit(unit)
AA_endturn()
AA_SpawnMineral()
AA_Gather()
AA_LoadUnits()
FindNearest(Type)
GetTravelDirection(target)


[AHKarena_v2.011.ahk]
AA_Spawn()
AA_Scan()
AA_Refresh()
AA_DrawUnit(unit)
AA_endturn()
AA_SpawnMineral()
AA_Gather()
AA_LoadUnits()
FindNearest(Type)
GetTravelDirection(target)


[AHKarena_v2.011_dev.ahk]
AA_Spawn()
AA_Scan()
AA_Refresh()
AA_DrawUnit(unit)
AA_endturn()
AA_SpawnMineral()
AA_Gather()
AA_LoadUnits()
FindNearest(Type)
GetTravelDirection(target)


[AHKarena_v2.012.ahk]
AA_Spawn()
AA_Scan()
AA_Refresh()
AA_DrawUnit(unit)
AA_endturn()
AA_SpawnMineral()
AA_Gather()
AA_LoadUnits()
FindNearest(Type)
GetTravelDirection(target)
AA_missile(X,Y)
UnitDeath(target)
DirectionCoords(direction2)
vector(setX, setY)
vectorGetX(vector)
vectorGetY(vector)
vectorNormalized(vector)
vectorMagnitude(vector)
vectorMultiply(vector, constant)
vectorFromCoords(startX, startY, finishX, finishY)
vectorGetShortLine(startX, startY, finishX, finishY)


[AHKarena_v2.02.ahk]
AA_Spawn()
AA_Scan()
AA_Refresh()
AA_DrawUnit(unit)
AA_endturn()
AA_SpawnMineral()
AA_Gather()
AA_LoadUnits()
FindNearest(Type)
GetTravelDirection(target)
AA_missile(X,Y)
UnitDeath(target)
DirectionCoords(direction2)
vector(setX, setY)
vectorGetX(vector)
vectorGetY(vector)
vectorNormalized(vector)
vectorMagnitude(vector)
vectorMultiply(vector, constant)
vectorFromCoords(startX, startY, finishX, finishY)
vectorGetShortLine(startX, startY, finishX, finishY, normval)


[AHKarena_v2.1.ahk]
AA_Spawn()
AA_Refresh()
AA_DrawUnit(unit)
AA_endturn()
AA_SpawnMineral()
AA_Gather(unit)
Player1Script()
Player2Script()


[AHKControl.ahk]
ShowScriptTrayMenu(hWnd)
GetFileToEdit(id)
EditScriptFile(script_path)
OpenIncludesMenu(id, require_multiple_scripts=true)
RebuildAndShowMenu(script_id_to_show=0, script_path_to_show="")
GetTrayIconInfo(TargetPID, ByRef hWnd, ByRef uID, ByRef nMsg, ByRef hIcon, ByRef sTooltip)
GetTrayBarHwnd()


[ahkMessenger_client.ahk]
WS_OnRead(socket)
autoScroll()


[AhkSpy.ahk]
MyCondition()
GetClientPos(hwnd, ByRef x, ByRef y)
GetClientSize(hwnd, ByRef RealWidth, ByRef RealHeight)
MyNameFunc(Mod, KeyName, Prefix, Hotkey, VkCode, ThisKey)
HF_HotkeyUserFunc(Option = "", UserFuncName = "")
HF_WM_ACTIVATE(HF_wp)
HF_ExtFunc(F, V)
HF_Unhook()
HF_Hook()
HF_CleanMod()
HF_HotkeyUserRead(Key, Section = "", Path = "")
HF_ReadToSend(Key, Section = "", Path = "")


[Align.ahk]
Align(HCtrl, Type="", Dim="", HGlueCtrl="")


[Alt+Drag_LMB to move inactive windows under cursor.ahk]
KDE_WinMove(sButton)


[Alt+Drag_LMB to move window under cursor.ahk]
WinUnderMousePointerActive()
KDE_WinMove(sButton)


[Anchor.ahk]
Anchor(cl, a = "", r = false)


[argp.ahk]
display(sentence = "hello world", caseMod = 0, html = 0)
display(options)
argp_parse(ByRef _args, _maxcount=32, ByRef _n1="", ByRef _v1="", ByRef _n2="", ByRef _v2="", ByRef _n3="", ByRef _v3="", ByRef _n4="", ByRef _v4="", ByRef _n5="", ByRef _v5="", ByRef _n6="", ByRef _v6="", ByRef _n7="", ByRef _v7="", ByRef _n8="", ByRef _v8="", ByRef _n9="", ByRef _v9="", ByRef _n10="", ByRef _v10="", ByRef _n11="", ByRef _v11="", ByRef _n12="", ByRef _v12="", ByRef _n13="", ByRef _v13="", ByRef _n14="", ByRef _v14="", ByRef _n15="", ByRef _v15="", ByRef _n16="", ByRef _v16="", ByRef _n17="", ByRef _v17="", ByRef _n18="", ByRef _v18="", ByRef _n19="", ByRef _v19="", ByRef _n20="", ByRef _v20="", ByRef _n21="", ByRef _v21="", ByRef _n22="", ByRef _v22="", ByRef _n23="", ByRef _v23="", ByRef _n24="", ByRef _v24="", ByRef _n25="", ByRef _v25="", ByRef _n26="", ByRef _v26="", ByRef _n27="", ByRef _v27="", ByRef _n28="", ByRef _v28="", ByRef _n29="", ByRef _v29="", ByRef _n30="", ByRef _v30="", ByRef _n31="", ByRef _v31="", ByRef _n32="", ByRef _v32="")
argp_getopt(ByRef _args, _keylist="", _case=true, ByRef _1="", ByRef _2="", ByRef _3="", ByRef _4="", ByRef _5="", ByRef _6="", ByRef _7="", ByRef _8="", ByRef _9="", ByRef _10="", ByRef _11="", ByRef _12="", ByRef _13="", ByRef _14="", ByRef _15="", ByRef _16="", ByRef _17="", ByRef _18="", ByRef _19="", ByRef _20="", ByRef _21="", ByRef _22="", ByRef _23="", ByRef _24="", ByRef _25="", ByRef _26="", ByRef _27="", ByRef _28="", ByRef _29="", ByRef _30="", ByRef _31="", ByRef _32="")


[BadWindowsSuppressor.ahk]
ShellProc(nCode)


[BBCodes.ahk]
Wrap(tag)


[BinaryEncodingDecoding.ahk]
FormatHexNumber(_value, _digitNb)
Bin2Hex(ByRef @hexString, ByRef @bin, _byteNb=0)
Hex2Bin(ByRef @bin, _hex, _byteNb=0)


[C# GUI Converter.ahk]
	__New()
	
	BtnBrowse_Click()
	
	BtnSaveBrowse_Click()
	
	BtnConvert_Click()
	
	Convert(InPath, OutPath)
	
	Button(CurrentControl, line)
	
	Edit(CurrentControl, line)
	
	Checkbox(CurrentControl, line)
	
	Radio(CurrentControl, line)
	
	ComboBox(CurrentControl, line)
	
	DropDownList(CurrentControl, line)
	
	ListBox(CurrentControl, line)
	
	ListView(CurrentControl, line)
	


[Capitalize.ahk]
isCurrLayoutRu()


[CColor.ahk]
CColor(Hwnd, Background="", Foreground="")
CColor_(Wp, Lp, Msg, Hwnd)


[cControls.ahk]
	Show()
	
	Hide()
	
	Focus()
	
	__Get(Name)
__Set(Name, Value)
	__New(Name, Options, Text, GUINum)
	
	__New(Name, Options, Text, GUINum)
	
	HandleEvent()
	
	__New(Name, Options, Text, GUINum)
	
	HandleEvent()
	
	__New(Name, Options, Text, GUINum, Type)
	
	__Get(Name)
	__Set(Name, Value)
	
	HandleEvent()
	
	__New(Name, Options, Text, GUINum, Type)
	
	__Get(Name)
	__Set(Name, Value)
	
	HandleEvent()
	
	__New(Name, ByRef Options, Text, GUINum)
	
	__Delete()
	
	ModifyCol(ColumnNumber="", Options="", ColumnTitle="")
	
	InsertCol(ColumnNumber, Options="", ColumnTitle="")
	
	DeleteCol(ColumnNumber)
	
	__Get(Name, Params*)
	
	__Set(Name, Value, Params*)
	
		__New(Control)
		
		_NewEnum()
		
		MaxIndex()
		
		AddRow(Options, Fields*)
		
		InsertRow(RowNumber, Options, Fields)
		
		ModifyRow(RowNumber, Options, Fields)
		
		DeleteRow(RowNumber)
		
		__Get(Name)
		
		__Set(Name, Value)
		
			__New(Control, RowNumber)
			
			_NewEnum()
			
			MaxIndex()
			
			__Get(Name)
			
			__Set(Name, Value)
			
	HandleEvent()
	
	__New(Name, Options, Text, GUINum)
	
	SetImageFromHBitmap(hBitmap)
	
	HandleEvent()
	
	__New(Name, Options, Text, GUINum)
	


[CDialogs.ahk]
	__New(Mode="")
	
	__Delete()
	
	Show()
	


[cdomessage.ahk]
cdomessage(sFrom, sTo, sSubject, sBody, sAttach, sServer, sUsername, sPassword, bTLS = True, nPort = 25, nSend = 2, nAuth = 1)


[CEnumerator.ahk]
	__New(Object)
	
	Next(byref key, byref value)
	


[CGUI.ahk]
	__New()
	
	__Delete()
	
	Destroy()
	
	Show(Options="")
	
	Activate()
	
	Hide()
	
	Minimize()
	
	Maximize()
	
	Restore()
	
	Redraw()
	
	Font(Options, Fontname)
	
	Color(WindowColor, ControlColor)
	
	Margin(x, y)
	
	Flash(Off = "")
	
	Menu(Menuname="")
	
	Add(Control, Name, Options, Text)
	
	__Get(Name)
	
	__Set(Name, Value)
	
	HandleEvent()
	


[CheckDropboxForConflictedCopies.ahk]
IsConflictedFile()
RemoveConflictedFile()


[Clipboard Manager.ahk]
handleClip(action)


[CloseAllAhks.ahk]
CloseAllAhkProcesses(options, excludeRegEx)


[CLR.ahk]
CLR_Start()
CLR_StartDomain(ByRef pAppDomain, BaseDirectory="")
CLR_StopDomain(pAppDomain)
CLR_Stop()
CLR_CreateObject(pAssembly, sType, Type1="", Arg1="", Type2="", Arg2="", Type3="", Arg3="", Type4="", Arg4="", Type5="", Arg5="", Type6="", Arg6="", Type7="", Arg7="", Type8="", Arg8="", Type9="", Arg9="")
CLR_CompileVB(Code, References, pAppDomain=0, FileName="", CompilerOptions="")
CLR_CompileAssembly(Code, References, ProviderAssembly, ProviderType, pAppDomain=0, FileName="", CompilerOptions="")


[CMDret.ahk]
CMDret_RunReturn(CMDin, WorkingDir=0)


[CMDret_stream.ahk]
CMDret_Stream(CMDin, CMDname="", WorkingDir=0)


[COM.ahk]
COM_Init()
COM_Term()
COM_VTable(ppv, idx)
COM_QueryInterface(ppv, IID = "")
COM_AddRef(ppv)
COM_Release(ppv)
COM_QueryService(ppv, SID, IID = "")
COM_FindConnectionPoint(pdp, DIID)
COM_GetConnectionInterface(pcp)
COM_Advise(pcp, psink)
COM_Unadvise(pcp, nCookie)
COM_Enumerate(penum, ByRef Result, ByRef vt = "")
COM_Invoke(pdsp,name="",prm0="vT_NoNe",prm1="vT_NoNe",prm2="vT_NoNe",prm3="vT_NoNe",prm4="vT_NoNe",prm5="vT_NoNe",prm6="vT_NoNe",prm7="vT_NoNe",prm8="vT_NoNe",prm9="vT_NoNe")
		If	(prm%A_LoopField% == "vT_NoNe")
		
COM_Invoke_(pdsp,name,typ0="",prm0="",typ1="",prm1="",typ2="",prm2="",typ3="",prm3="",typ4="",prm4="",typ5="",prm5="",typ6="",prm6="",typ7="",prm7="",typ8="",prm8="",typ9="",prm9="")
		If	(typ%A_LoopField% = "")
		
COM_DispInterface(this, prm1="", prm2="", prm3="", prm4="", prm5="", prm6="", prm7="", prm8="")
COM_DispGetParam(pDispParams, Position = 0, vt = 8)
COM_DispSetParam(val, pDispParams, Position = 0, vt = 8)
COM_Error(hr = "", lr = "", pei = "", name = "")
COM_CreateIDispatch()
COM_GetDefaultInterface(pdisp, LCID = 0)
COM_GetDefaultEvents(pdisp, LCID = 0)
COM_GetGuidOfName(pdisp, Name, LCID = 0)
COM_GetTypeInfoOfGuid(pdisp, GUID, LCID = 0)
COM_ConnectObject(psource, prefix = "", DIID = "")
COM_DisconnectObject(psink)
COM_CreateObject(CLSID, IID = "", CLSCTX = 5)
COM_ActiveXObject(ProgID)
COM_GetObject(Moniker)
COM_GetActiveObject(ProgID)
COM_CLSID4ProgID(ByRef CLSID, ProgID)
COM_GUID4String(ByRef CLSID, String)
COM_ProgID4CLSID(pCLSID)
COM_String4GUID(pGUID)
COM_IsEqualGUID(pGUID1, pGUID2)
COM_CoCreateGuid()
COM_CoTaskMemAlloc(cb)
COM_CoTaskMemFree(pv)
COM_CoInitialize()
COM_CoUninitialize()
COM_SysAllocString(sString)
COM_SysFreeString(bstr)
COM_SysStringLen(bstr)
COM_SafeArrayDestroy(psa)
COM_VariantClear(pvarg)
COM_AccInit()
COM_AccTerm()
COM_AccessibleChildren(pacc, cChildren, ByRef varChildren)
COM_AccessibleObjectFromEvent(hWnd, idObject, idChild, ByRef _idChild_="")
COM_AccessibleObjectFromPoint(x, y, ByRef _idChild_="")
COM_AccessibleObjectFromWindow(hWnd, idObject=-4, IID = "")
COM_WindowFromAccessibleObject(pacc)
COM_GetRoleText(nRole)
COM_GetStateText(nState)
COM_AtlAxWinInit(Version = "")
COM_AtlAxWinTerm(Version = "")
COM_AtlAxAttachControl(pdsp, hWnd, Version = "")
COM_AtlAxCreateControl(hWnd, Name, Version = "")
COM_AtlAxGetControl(hWnd, Version = "")
COM_AtlAxGetHost(hWnd, Version = "")
COM_AtlAxCreateContainer(hWnd, l, t, w, h, Name = "", Version = "")
COM_AtlAxGetContainer(pdsp, bCtrl = "")
COM_Ansi4Unicode(pString, nSize = "")
COM_Unicode4Ansi(ByRef wString, sString, nSize = "")
COM_Ansi2Unicode(ByRef sString, ByRef wString, nSize = "")
COM_Unicode2Ansi(ByRef wString, ByRef sString, nSize = "")
COM_ScriptControl(sCode, sLang = "", bEval = False, sFunc = "", sName = "", pdisp = 0, bGlobal = False)


[ConnectedToInternet.ahk]
ConnectedToInternet(flag=0x40)


[ConsoleApp.ahk]
ConsoleApp_RunWait(CmdLine, WorkingDir="", byref ExitCode="")
ConsoleApp_Run(CmdLine, WorkingDir="", Reserved="", byref PID="")
ConsoleApp_GetStdOut(ConsoleAppHandle, byref Stdout, byref BytesAppended = 0, byref ExitCode="")
ConsoleApp_CloseHandle(ConsoleAppHandle)
ConsoleApps_Initialize()
CONSOLEAPPS_PRIVATE_ReadFile(hFile, byref buf, byref BytesRead=0, BufferSize=4096)
CONSOLEAPPS_PRIVATE_abort()
CONSOLEAPPS_PRIVATE_calloc(byref Var, size, fillbyte=0)
CONSOLEAPPS_PRIVATE_free(byref Var)
CONSOLEAPPS_PRIVATE_WIN32_MAKELANGID(p, s)
CONSOLEAPPS_PRIVATE_malloc(byref var, size)
CONSOLEAPPS_PRIVATE_PtrToStr(lpStr)
CONSOLEAPPS_PRIVATE_throw(ErrorCode, ErrorMessage="", ParamName="", LastWin32Error="")


[Copy of player_Camerb.ahk]
CamerBmove(2currentunit, 2Dir)
CamerBGetTravelDirection(xDistance, yDistance)


[Crypt.ahk]
Free(byRef var)
CryptConst(name)
		
		StrDecryptToFile(EncryptedHash,pFileOut,password,CryptAlg = 1, HashAlg = 1) 
		
		
		FileEncryptToStr(pFileIn,password,CryptAlg = 1, HashAlg = 1) 
		
		
		FileEncrypt(pFileIn,pFileOut,password,CryptAlg = 1, HashAlg = 1)
		
		FileDecrypt(pFileIn,pFileOut,password,CryptAlg = 1, HashAlg = 1)
		
		StrEncrypt(string,password,CryptAlg = 1, HashAlg = 1)
		
	
		StrDecrypt(EncryptedHash,password,CryptAlg = 1, HashAlg = 1)
		
		
		FileHash(pFile,HashAlg = 1,pwd = "",hmac_alg = 1)
		
		
		_CalcHash(ByRef bBuffer,BufferLen,pFile,HashAlg = 1,pwd = "",hmac_alg = 1)
		
ByteToHash(ByRef pbData,dwLen)
HashToByte(sHash,ByRef ByteBuf)
GetLastError()
DecToHex(num)
ChHex(numb)
ErrorFormat(error_id)
StrPutVar(string, ByRef var, addBufLen = 0,encoding="UTF-16")
SetKeySalt(hKey,hProv)
GetKeySalt(hKey)


[Csharp.ahk]
OnData(Hwnd, Data, Port, Size)


[Cycle.ahk]
Cycle(p_Input,p_Step=1,p_Delim="|",p_Omit=" `t")


[daemon-v2.ahk]
StrCount(haystack, needle)
FormatResponse(MessageType, payload)
FormatNoValueResponse()
FormatBinaryResponse(bin)
AHKSetDetectHiddenWindows(args*)
AHKSetTitleMatchMode(args*)
AHKGetTitleMatchMode(args*)
AHKGetTitleMatchSpeed(args*)
AHKSetSendLevel(args*)
AHKGetSendLevel(args*)
AHKWinExist(args*)
AHKWinClose(args*)
AHKWinKill(args*)
AHKWinWait(args*)
AHKWinWaitActive(args*)
AHKWinWaitNotActive(args*)
AHKWinWaitClose(args*)
AHKWinMinimize(args*)
AHKWinMaximize(args*)
AHKWinRestore(args*)
AHKWinIsActive(args*)
AHKWinGetID(args*)
AHKWinGetTitle(args*)
AHKWinGetIDLast(args*)
AHKWinGetPID(args*)
AHKWinGetProcessName(args*)
AHKWinGetProcessPath(args*)
AHKWinGetCount(args*)
AHKWinGetMinMax(args*)
AHKWinGetControlList(args*)
AHKWinGetTransparent(args*)
AHKWinGetTransColor(args*)
AHKWinGetStyle(args*)
AHKWinGetExStyle(args*)
AHKWinGetText(args*)
AHKWinSetTitle(args*)
AHKWinSetAlwaysOnTop(args*)
AHKWinSetBottom(args*)
AHKWinShow(args*)
AHKWinHide(args*)
AHKWinSetTop(args*)
AHKWinSetEnable(args*)
AHKWinSetDisable(args*)
AHKWinSetRedraw(args*)
AHKWinSetStyle(args*)
AHKWinSetExStyle(args*)
AHKWinSetRegion(args*)
AHKWinSetTransparent(args*)
AHKWinSetTransColor(args*)
AHKImageSearch(args*)
AHKPixelGetColor(args*)
AHKPixelSearch(args*)
AHKMouseGetPos(args*)
AHKKeyState(args*)
AHKMouseMove(args*)
AHKClick(args*)
AHKGetCoordMode(args*)
AHKSetCoordMode(args*)
AHKGetSendMode(args*)
AHKSetSendMode(args*)
AHKMouseClickDrag(args*)
AHKRegRead(args*)
AHKRegWrite(args*)
AHKRegDelete(args*)
AHKKeyWait(args*)
AHKSend(args*)
AHKSendRaw(args*)
AHKSendInput(args*)
AHKSendEvent(args*)
AHKSendPlay(args*)
AHKSetCapsLockState(args*)
AHKSetNumLockState(args*)
AHKSetScrollLockState(args*)
HideTrayTip(args*)
AHKWinGetClass(args*)
AHKWinActivate(args*)
AHKWindowList(args*)
AHKControlClick(args*)
AHKControlGetText(args*)
AHKControlGetPos(args*)
AHKControlSend(args*)
AHKWinFromMouse(args*)
AHKWinIsAlwaysOnTop(args*)
AHKWinMove(args*)
AHKWinGetPos(args*)
AHKGetVolume(args*)
AHKSoundBeep(args*)
AHKSoundGet(args*)
AHKSoundSet(args*)
AHKSoundPlay(args*)
AHKSetVolume(args*)
AHKEcho(args*)
AHKTraytip(args*)
AHKShowToolTip(args*)
AHKGetClipboard(args*)
AHKGetClipboardAll(args*)
AHKSetClipboard(args*)
AHKSetClipboardAll(args*)
AHKClipWait(args*)
AHKBlockInput(args*)
AHKMenuTrayTip(args*)
AHKMenuTrayShow(args*)
AHKMenuTrayHide(args*)
AHKMenuTrayIcon(args*)
AHKMsgBox(args*)
AHKInputBox(args*)
AHKFileSelectFile(args*)
AHKFileSelectFolder(args*)
b64decode(&pszString)
b64encode(&data)
CommandArrayFromQuery(text)


[daemon.ahk]
FormatResponse(ByRef MessageType, ByRef payload)
FormatNoValueResponse()
FormatBinaryResponse(ByRef bin)
AHKSetDetectHiddenWindows(args*)
AHKSetTitleMatchMode(args*)
AHKGetTitleMatchMode(args*)
AHKGetTitleMatchSpeed(args*)
AHKSetSendLevel(args*)
AHKGetSendLevel(args*)
AHKWinExist(args*)
AHKWinClose(args*)
AHKWinKill(args*)
AHKWinWait(args*)
AHKWinWaitActive(args*)
AHKWinWaitNotActive(args*)
AHKWinWaitClose(args*)
AHKWinMinimize(args*)
AHKWinMaximize(args*)
AHKWinRestore(args*)
AHKWinIsActive(args*)
AHKWinGetID(args*)
AHKWinGetTitle(args*)
AHKWinGetIDLast(args*)
AHKWinGetPID(args*)
AHKWinGetProcessName(args*)
AHKWinGetProcessPath(args*)
AHKWinGetCount(args*)
AHKWinGetMinMax(args*)
AHKWinGetControlList(args*)
AHKWinGetTransparent(args*)
AHKWinGetTransColor(args*)
AHKWinGetStyle(args*)
AHKWinGetExStyle(args*)
AHKWinGetText(args*)
AHKWinSetTitle(args*)
AHKWinSetAlwaysOnTop(args*)
AHKWinSetBottom(args*)
AHKWinShow(args*)
AHKWinHide(args*)
AHKWinSetTop(args*)
AHKWinSetEnable(args*)
AHKWinSetDisable(args*)
AHKWinSetRedraw(args*)
AHKWinSetStyle(args*)
AHKWinSetExStyle(args*)
AHKWinSetRegion(args*)
AHKWinSetTransparent(args*)
AHKWinSetTransColor(args*)
AHKImageSearch(args*)
AHKPixelGetColor(args*)
AHKPixelSearch(args*)
AHKMouseGetPos(args*)
AHKKeyState(args*)
AHKMouseMove(args*)
AHKClick(args*)
AHKGetCoordMode(args*)
AHKSetCoordMode(args*)
AHKGetSendMode(args*)
AHKSetSendMode(args*)
AHKMouseClickDrag(args*)
AHKRegRead(args*)
AHKRegWrite(args*)
AHKRegDelete(args*)
AHKKeyWait(args*)
SetKeyDelay(args*)
AHKSend(args*)
AHKSendRaw(args*)
AHKSendInput(args*)
AHKSendEvent(args*)
AHKSendPlay(args*)
AHKSetCapsLockState(args*)
AHKSetNumLockState(args*)
AHKSetScrollLockState(args*)
HideTrayTip(args*)
AHKWinGetClass(args*)
AHKWinActivate(args*)
AHKWindowList(args*)
AHKControlClick(args*)
AHKControlGetText(args*)
AHKControlGetPos(args*)
AHKControlSend(args*)
AHKWinFromMouse(args*)
AHKWinIsAlwaysOnTop(args*)
AHKWinMove(args*)
AHKWinGetPos(args*)
AHKGetVolume(args*)
AHKSoundBeep(args*)
AHKSoundGet(args*)
AHKSoundSet(args*)
AHKSoundPlay(args*)
AHKSetVolume(args*)
CountNewlines(ByRef s)
AHKEcho(args*)
AHKTraytip(args*)
AHKShowToolTip(args*)
AHKGetClipboard(args*)
AHKGetClipboardAll(args*)
AHKSetClipboard(args*)
AHKSetClipboardAll(args*)
AHKClipWait(args*)
AHKBlockInput(args*)
AHKMenuTrayTip(args*)
AHKMenuTrayShow(args*)
AHKMenuTrayHide(args*)
AHKMenuTrayIcon(args*)
AHKGuiNew(args*)
AHKMsgBox(args*)
AHKInputBox(args*)
AHKFileSelectFile(byRef args)
AHKFileSelectFolder(byRef args)
b64decode(ByRef pszString)
b64encode(ByRef data)
CommandArrayFromQuery(ByRef text)


[DamerauLevenshteinDistance.ahk]
DamerauLevenshteinDistance(s, t)


[DateParse.ahk]
DateParse(str)


[DDEMessage.ahk]
DDE_ACK(wParam, lParam, MsgID, hWnd)
DDE_DATA(wParam, lParam, MsgID)
DDE_POKE(sItem, sData)
DDE_EXECUTE(sCmd)


[DDEML.ahk]
DdeInitialize(pCallback = 0, nFlags = 0)
DdeUninitialize(idInst)
DdeConnect(idInst, hServer, hTopic, pCC = 0)
DdeDisconnect(hConv)
DdeAccessData(hData)
DdeUnaccessData(hData)
DdeFreeDataHandle(hData)
DdeFreeStringHandle(idInst, hString)


[DeleteDropboxConflictedCopies.ahk]
DeleteConflictedCopies(path)
showConflictedCopies(path)


[DeluxeClipboard.ahk]
WINDOW(Actn)


[descript.ion for Windows Explorer.ahk]
Explorer_GetFolder()
Explorer_GetWindow()
Explorer_GetSelectedFileNames()
getDescription(folder, filesFilter = "")
setDescription(folder, name, description)
writeModified(folder)
grep(haystack, needle)


[Dlg.ahk]
Dlg_Color(ByRef Color, hGui=0)
Dlg_Find( hGui, Handler, Flags="d", FindText="")
Dlg_Replace( hGui, Handler, Flags="", FindText="", ReplaceText="")
Dlg_Font(ByRef Name, ByRef Style, ByRef Color, Effects=true, hGui=0)
Dlg_Icon(ByRef Icon, ByRef Index, hGui=0)
Dlg_Open( hGui=0, Title="", Filter="", DefaultFilter="", Root="", DefaultExt="", Flags="FILEMUSTEXIST HIDEREADONLY" )
Dlg_Save( hGui=0, Title="", Filter="", DefaultFilter="", Root="", DefaultExt="", Flags="" )
Dlg_callback(wparam, lparam, msg, hwnd)
(hFlags & FR_REPLACEALL)


[DllCallStruct.ahk]
SetNextUInt(ByRef @struct, _value, _bReset=false)
GetNextUInt(ByRef @struct, _bReset=false)
SetNextByte(ByRef @struct, _value, _bReset=false)
GetNextByte(ByRef @struct, _bReset=false)
GetInteger(ByRef @source, _offset = 0, _bIsSigned = false, _size = 4)
SetInteger(ByRef @dest, _integer, _offset = 0, _size = 4)
GetUnicodeString(ByRef @unicodeString, _ansiString)
GetAnsiStringFromUnicodePointer(_unicodeStringPt)
DumpDWORDs(ByRef @bin, _byteNb, _bExtended=false)
DumpDWORDsByAddr(_binAddr, _byteNb, _bExtended=false)


[Dock.ahk]
Dock(pClientID, pDockDef="", reset=0)
Dock_Shutdown()
Dock_Toggle( enable="" )
Dock_Update()
Dock_HookProc(hWinEventHook, event, hwnd, idObject, idChild, dwEventThread, dwmsEventTime )
API_SetWinEventHook(eventMin, eventMax, hmodWinEventProc, lpfnWinEventProc, idProcess, idThread, dwFlags)
API_UnhookWinEvent( hWinEventHook )


[DockA.ahk]
DockA(HHost="", HClient="", DockDef="")
DockA_(HHost, HClient, DockDef, Hwnd)


[Draw GDI+ above alwaysOnTop window (alt+1 alt+2).ahk]
WatchingMoveWindow(hWinEventHook, event, hwnd)
WatchingDestroyWindow(hWinEventHook, event, hwnd)
AlwaysOnTopOff(hwnd)
SetWinEventHook(eventMin, eventMax, hmodWinEventProc, lpfnWinEventProc, idProcess, idThread, dwFlags)


[DropCommand.ahk]
WM_MOUSEMOVE(wParam,lParam)


[DrugWinManager.ahk]
(class == "Progman")
	
activeWinMoveResize(dx, dy, dw, dh)
getActiveWindowCenterCoords()
moveWinWithCursor(buttonHeld)


[EmptyMem.ahk]
EmptyMem(PID="AHK Rocks")


[Eval.ahk]
Eval(x)
Eval_1(x)
Eval_ToBin(n)
Eval_ToBinW(n,W=8)
Eval_FromBin(bits)
Eval_GCD(a,b)
Eval_Choose(n,k)
Eval_Fib(n)
Eval_fac(n)


[ExamineCharsInString.ahk]
examineStrs(str1, str2)


[Exec.ahk]
Exec(_#_1,_#_2="",_#_3="",_#_4="",_#_5="",_#_6="",_#_7="",_#_8="",_#_9="",_#_10="",_#_11="",_#_12="",_#_13="",_#_14="",_#_15="",_#_16="",_#_17="",_#_18="",_#_19="",_#_20="")


[FcnLib-Clipboard.ahk]
copy(options="")
paste(options="")
CopyWait2(options="useNull")
CopyWait(options="useNull")
CopyWait2()
CopyWait(options="")
ClipWait(clipboardContentsToWaitFor, options="")
ClipWaitNot(clipboardContentsToWaitFor, options="")
SendViaClip(text)


[FcnLib-GetUrlBar.ahk]
GetURLbar(browser)


[FcnLib-IniStats.ahk]
iniPP(itemTracked)
iniMostRecentTime(itemTracked)


[FcnLib-Misc.ahk]
GitGetCurrentBranchName()
GitGetIssueNumber(currentBranchName)
GitGetIssueTitle(issueNumber)


[FcnLib-Nightly.ahk]
MintLogIn()
MintGetTransactionCsvs()
MintTouch()


[FcnLib-NotRealFcnLibs.ahk]
GetIPaddress()
CloseProgramsThatHinderNR2003()
LaunchRaceViaRLM()
ChangeLogitechWheelMode()
LaunchTeamspeak2()
LaunchTeamspeak()
LaunchRace(ip, pass)
LaunchRaceViaSmsLobby()


[FcnLib-Opera.ahk]
RunOpera()
CloseAllTabs()
GoToPage(url)
WinWaitActiveTitleChange(oldTitle="")


[FcnLib-Rewrites.ahk]
FileAppend(text, file)
FileAppendLine(text, file)
FileCopy(source, dest, options="")
FileDelete(file)
FileMove(source, dest, options="")
FileCreate(text, file)
IniWrite(file, section, key, value)
IniDelete(file, section, key="")
IniRead(file, section, key, Default = "ERROR")
IniListAllSections(file)
GetPID(exeName)
ProcessExist(exeName)
ProcessClose(exeName)
ProcessCloseAll(exeName)
StringReplace(ByRef InputVar, SearchText, ReplaceText = "", All = "A")


[FcnLib.ahk]
SaveScreenShot(descriptiveText="", directoryPath="dropbox", options="")
SleepMinutes(minutes)
SleepSeconds(seconds)
OptionalDebug(textOrOptions="Hello World!", text1="ZZZ-DEFAULT-BLANK-VAR-MSG-ZZZ", text2="ZZZ-DEFAULT-BLANK-VAR-MSG-ZZZ", text3="ZZZ-DEFAULT-BLANK-VAR-MSG-ZZZ", text4="ZZZ-DEFAULT-BLANK-VAR-MSG-ZZZ", text5="ZZZ-DEFAULT-BLANK-VAR-MSG-ZZZ", text6="ZZZ-DEFAULT-BLANK-VAR-MSG-ZZZ", text7="ZZZ-DEFAULT-BLANK-VAR-MSG-ZZZ", text8="ZZZ-DEFAULT-BLANK-VAR-MSG-ZZZ", text9="ZZZ-DEFAULT-BLANK-VAR-MSG-ZZZ", text10="ZZZ-DEFAULT-BLANK-VAR-MSG-ZZZ", text11="ZZZ-DEFAULT-BLANK-VAR-MSG-ZZZ", text12="ZZZ-DEFAULT-BLANK-VAR-MSG-ZZZ", text13="ZZZ-DEFAULT-BLANK-VAR-MSG-ZZZ", text14="ZZZ-DEFAULT-BLANK-VAR-MSG-ZZZ", text15="ZZZ-DEFAULT-BLANK-VAR-MSG-ZZZ")
CustomTitleMatchMode(options="")
ForceWinFocus(titleofwin, options="")
ForceWinFocusIfExist(titleofwin, options="")
CloseWin(titleofwin, options="")
SendViaClipboard(text)
MouseMoveIfImageSearch(filename)
ClickIfImageSearch(filename, clickOptions="left Mouse")
IsRegExMatch(Haystack, Needle)
Remap(input, remap1, replace1, remap2=0, replace2=0, remap3=0, replace3=0, remap4=0, replace4=0, remap5=0, replace5=0, remap6=0, replace6=0)
MoveToRandomSpotInWindow()
WeightedRandom(OddsOfa1, OddsOfa2, OddsOfa3=0, OddsOfa4=0, OddsOfa5=0)
DebugBool(bool)
BoolToString(bool)
ColorIsDarkerThan(color1, color2)
WaitUntilColorStopsChanging(x, y)
ForcePixelColorChangeByClicking(x, y, lightestOrDarkest, checkboxStates=2)
Click(xCoord, yCoord, options="Left Mouse")
CloseWindowGracefully(title, text="", xClickToClose="", yClickToClose="")
CurrentTime(options="")
CurrentTimePlus(seconds)
TimePlus(one, two)
CurrentlyBefore(time)
CurrentlyAfter(time)
StartTimer()
ElapsedTime(StartTime)
PrettyTime(TimeToFormat)
IsMinimized(title="", text="")
IsMaximized(title="", text="")
CloseDifficultApps()
CloseDifficultAppsAllScreens()
EnsureDirExists(path)
ParentDir(fileOrFolder)
DirExist(dirPath)
ProgramFilesDir(relativePath)
debug(textOrOptions="Hello World!", text1="ZZZ-DEFAULT-BLANK-VAR-MSG-ZZZ", text2="ZZZ-DEFAULT-BLANK-VAR-MSG-ZZZ", text3="ZZZ-DEFAULT-BLANK-VAR-MSG-ZZZ", text4="ZZZ-DEFAULT-BLANK-VAR-MSG-ZZZ", text5="ZZZ-DEFAULT-BLANK-VAR-MSG-ZZZ", text6="ZZZ-DEFAULT-BLANK-VAR-MSG-ZZZ", text7="ZZZ-DEFAULT-BLANK-VAR-MSG-ZZZ", text8="ZZZ-DEFAULT-BLANK-VAR-MSG-ZZZ", text9="ZZZ-DEFAULT-BLANK-VAR-MSG-ZZZ", text10="ZZZ-DEFAULT-BLANK-VAR-MSG-ZZZ", text11="ZZZ-DEFAULT-BLANK-VAR-MSG-ZZZ", text12="ZZZ-DEFAULT-BLANK-VAR-MSG-ZZZ", text13="ZZZ-DEFAULT-BLANK-VAR-MSG-ZZZ", text14="ZZZ-DEFAULT-BLANK-VAR-MSG-ZZZ", text15="ZZZ-DEFAULT-BLANK-VAR-MSG-ZZZ")
errord(textOrOptions="Hello World!", text1="ZZZ-DEFAULT-BLANK-VAR-MSG-ZZZ", text2="ZZZ-DEFAULT-BLANK-VAR-MSG-ZZZ", text3="ZZZ-DEFAULT-BLANK-VAR-MSG-ZZZ", text4="ZZZ-DEFAULT-BLANK-VAR-MSG-ZZZ", text5="ZZZ-DEFAULT-BLANK-VAR-MSG-ZZZ", text6="ZZZ-DEFAULT-BLANK-VAR-MSG-ZZZ", text7="ZZZ-DEFAULT-BLANK-VAR-MSG-ZZZ", text8="ZZZ-DEFAULT-BLANK-VAR-MSG-ZZZ", text9="ZZZ-DEFAULT-BLANK-VAR-MSG-ZZZ", text10="ZZZ-DEFAULT-BLANK-VAR-MSG-ZZZ", text11="ZZZ-DEFAULT-BLANK-VAR-MSG-ZZZ", text12="ZZZ-DEFAULT-BLANK-VAR-MSG-ZZZ", text13="ZZZ-DEFAULT-BLANK-VAR-MSG-ZZZ", text14="ZZZ-DEFAULT-BLANK-VAR-MSG-ZZZ", text15="ZZZ-DEFAULT-BLANK-VAR-MSG-ZZZ")
fatalErrord(textOrOptions="Hello World!", text1="ZZZ-DEFAULT-BLANK-VAR-MSG-ZZZ", text2="ZZZ-DEFAULT-BLANK-VAR-MSG-ZZZ", text3="ZZZ-DEFAULT-BLANK-VAR-MSG-ZZZ", text4="ZZZ-DEFAULT-BLANK-VAR-MSG-ZZZ", text5="ZZZ-DEFAULT-BLANK-VAR-MSG-ZZZ", text6="ZZZ-DEFAULT-BLANK-VAR-MSG-ZZZ", text7="ZZZ-DEFAULT-BLANK-VAR-MSG-ZZZ", text8="ZZZ-DEFAULT-BLANK-VAR-MSG-ZZZ", text9="ZZZ-DEFAULT-BLANK-VAR-MSG-ZZZ", text10="ZZZ-DEFAULT-BLANK-VAR-MSG-ZZZ", text11="ZZZ-DEFAULT-BLANK-VAR-MSG-ZZZ", text12="ZZZ-DEFAULT-BLANK-VAR-MSG-ZZZ", text13="ZZZ-DEFAULT-BLANK-VAR-MSG-ZZZ", text14="ZZZ-DEFAULT-BLANK-VAR-MSG-ZZZ", text15="ZZZ-DEFAULT-BLANK-VAR-MSG-ZZZ")
delog(textOrOptions="Hello World!", text1="ZZZ-DEFAULT-BLANK-VAR-MSG-ZZZ", text2="ZZZ-DEFAULT-BLANK-VAR-MSG-ZZZ", text3="ZZZ-DEFAULT-BLANK-VAR-MSG-ZZZ", text4="ZZZ-DEFAULT-BLANK-VAR-MSG-ZZZ", text5="ZZZ-DEFAULT-BLANK-VAR-MSG-ZZZ", text6="ZZZ-DEFAULT-BLANK-VAR-MSG-ZZZ", text7="ZZZ-DEFAULT-BLANK-VAR-MSG-ZZZ", text8="ZZZ-DEFAULT-BLANK-VAR-MSG-ZZZ", text9="ZZZ-DEFAULT-BLANK-VAR-MSG-ZZZ", text10="ZZZ-DEFAULT-BLANK-VAR-MSG-ZZZ", text11="ZZZ-DEFAULT-BLANK-VAR-MSG-ZZZ", text12="ZZZ-DEFAULT-BLANK-VAR-MSG-ZZZ", text13="ZZZ-DEFAULT-BLANK-VAR-MSG-ZZZ", text14="ZZZ-DEFAULT-BLANK-VAR-MSG-ZZZ", text15="ZZZ-DEFAULT-BLANK-VAR-MSG-ZZZ")
SelfDestruct()
RunAhkAndBabysit(filename)
RunAhk(ahkFilename, params="", options="")
RunProgram(pathOrAppFilenameOrAppNickname)
sendEmail(sSubject, sBody, sAttach="", sTo="cameronbaustian@gmail.com", sReplyTo="cameronbaustian+bot@gmail.com")
GetProcesses()
GetCpuUsage( ProcNameOrPid )
GetRamUsage(ProcNameOrPid, Units="K")
IsFileEqual(filename1, filename2)
WaitFileExist(filename)
WaitFileNotExist(filename)
DualWinWait(successWin, failureWin)
TrayMsg(Title, Text="", TimeInSeconds=20, Icon=1, Options="")
CloseTrayTip(text)
GetOS()
DirGetSize(dirPath)
RepairPath(FullPath)
GetFolderName(FullPath)
Prompt(message, options="")
SexPanther(SexPanther="SexPanther")
DirectoryScan(directoryToScan, reportFilePath="C:/My Dropbox/Public/logs/trace.txt")
UrlDownloadToVar(URL, Proxy="", ProxyBypass="")
ConcatWithSep(separator, text0, text1, text2="ZZZ-DEFAULT-BLANK-VAR-MSG-ZZZ", text3="ZZZ-DEFAULT-BLANK-VAR-MSG-ZZZ", text4="ZZZ-DEFAULT-BLANK-VAR-MSG-ZZZ", text5="ZZZ-DEFAULT-BLANK-VAR-MSG-ZZZ", text6="ZZZ-DEFAULT-BLANK-VAR-MSG-ZZZ", text7="ZZZ-DEFAULT-BLANK-VAR-MSG-ZZZ", text8="ZZZ-DEFAULT-BLANK-VAR-MSG-ZZZ", text9="ZZZ-DEFAULT-BLANK-VAR-MSG-ZZZ", text10="ZZZ-DEFAULT-BLANK-VAR-MSG-ZZZ", text11="ZZZ-DEFAULT-BLANK-VAR-MSG-ZZZ", text12="ZZZ-DEFAULT-BLANK-VAR-MSG-ZZZ", text13="ZZZ-DEFAULT-BLANK-VAR-MSG-ZZZ", text14="ZZZ-DEFAULT-BLANK-VAR-MSG-ZZZ", text15="ZZZ-DEFAULT-BLANK-VAR-MSG-ZZZ")
IsVM(ComputerName="")
ForceReloadAll()
CloseAllAhks(excludeRegEx="", startAhkAfter="")
ZeroPad(number, length)
IsDirFileOrIndeterminate(path)
AddToTrace(var, t1="", t2="", t3="", t4="", t5="", t6="", t7="", t8="", t9="", t10="", t11="", t12="", t13="", t14="", t15="")
DeleteTraceFile()
REFP(inFile="REFP/in1.txt", regExFile="REFP/regex1.txt", outFile="REFP/out1.txt")
EnsureEndsWith(string, char)
EnsureStartsWith(string, char)
SpiffyMute()
GetXmlElement(xml, pathToElement)
fatalIfNotThisPc(computerName)
ThreadedMsgbox(message)
LeadComputer()
MultiWinWait(successWin, successWinText, failureWin, failureWinText)
ClickButton(button)
AddDatetime(datetime, numberToAdd, unitsOfNumberToAdd)
Format(value, options)
InStrCount(String, Needle)
RemoveLineEndings(page)
FormatDollar(amount)
MorningStatusAppend(header, item)
GetPath(file)
CommandPromptCopy()
NightlyStats(title, data)


[File.ahk]
File_AES(sFileFr, sFileTo, sPassword, SID = 256, bEncrypt = True)
File_ReadMemory(sFile, pBuffer, nSize = 512, bAppend = False)
File_WriteMemory(sFile, ByRef sBuffer, nSize = 0)
File_CreateFile(sFile, nCreate = 3, nAccess = 0x1F01FF, nShare = 3, bFolder = False)
File_DeleteFile(sFile)
File_ReadFile(hFile, pBuffer, nSize = 1024)
File_WriteFile(hFile, pBuffer, nSize = 1024)
File_GetFileSize(hFile)
File_SetEndOfFile(hFile)
File_SetFilePointer(hFile, nPos = 0, nMove = 0)
File_CloseHandle(Handle)
File_InternetOpen(sAgent = "AutoHotkey", nType = 4)
File_InternetOpenUrl(hInet, sUrl, nFlags = 0, pHeaders = 0)
File_InternetReadFile(hFile, pBuffer, nSize = 1024)
File_InternetWriteFile(hFile, pBuffer, nSize = 1024)
File_InternetSetFilePointer(hFile, nPos = 0, nMove = 0)
File_InternetCloseHandle(Handle)


[FileExtract.ahk]
FileExtract(Source, Dest, Flag=0)
FileExtract_(Source, Dest, Flag)
FileExtract_ToMem(Source, ByRef pData, ByRef DataSize)


[FileGetVersionInfo.ahk]
FileGetVersionInfo( peFile="", StringFileInfo="" )


[fileIsBinary.ahk]
fileIsBinary(_filePath)


[FindAndRunProgram.ahk]
TestProgramPath(appFilename, path, noWrite=false)


[FindMe.ahk]
UnHTM( HTM )
ConvertEntities(HTML)
LV_SortArrow(h, c, d="")
TF_RegExReplaceInLines(Text, StartLine = 1, EndLine = 0, NeedleRegEx = "", Replacement = "")
	
TF_Count(String, Char)
	
	TF_ReturnOutPut(OW, Text, FileName, TrimTrailing = 1, CreateNewFile = 0)
_MakeMatchList(Text, Start = 1, End = 0)
	
agrep(ByRef _haystack="", _pattern="", _ignoreCase=false, _invert=false, _lineMatch=false, _replace="")
Anchor(i, a = "", r = false)
Load_DDL_Values(_File, _Control="", _text="", _Max=5, _Section="Logs", _Keyname="LastSearch", _Default="Regex is Enabled. Case Insensitive")
DDL_Load(_file, _max=5, _section="Logs", _keyname="LastSearch", _default="Regex is Enabled. Case Insensitive")
DDL_Save(_file, _inputvar="", _max=5, _section="Logs", _keyname="LastSearch", _default="Regex is Enabled. Case Insensitive")
escIsPressed()


[FlashUnpacker(with backup).ahk]
backup(file)


[FolderScan.ahk]
FolderScan(path, needle, options="files folders regex")


[Font.ahk]
Font(HCtrl="", Font="", BRedraw=1)
Font_DrawText(Text, DC="", Font="", Flags="", Rect="")


[ForceReloadAll.ahk]
CloseAllAhkProcesses(options)


[Format4Csv.ahk]
Format4CSV(F4C_String)


[ftp.ahk]
FTP_CreateDirectory(hConnect,DirName)
FTP_RemoveDirectory(hConnect,DirName)
FTP_SetCurrentDirectory(hConnect,DirName)
FTP_PutFile(hConnect,LocalFile, NewRemoteFile="", Flags=0)
FTP_GetFile(hConnect,RemoteFile, NewFile="", Flags=0)
FTP_GetFileSize(hConnect,FileName, Flags=0)
FTP_DeleteFile(hConnect,FileName)
FTP_RenameFile(hConnect,Existing, New)
FTP_Open(Server, Port=21, Username=0, Password=0 ,Proxy="", ProxyBypass="")
FTP_CloseSocket(hConnect)
FTP_Close()
FTP_GetFileInfo(ByRef @FindData, InfoName)
FTP_FileTimeToStr(FileTime)
FTP_FindFirstFile(hConnect, SearchFile, ByRef @FindData)
FTP_FindNextFile(hEnum, ByRef @FindData)
FTP_GetCurrentDirectory(hConnect,ByRef DirName)


[Functions.ahk]
Functions()
IfBetween(ByRef var, LowerBound, UpperBound)
IfNotBetween(ByRef var, LowerBound, UpperBound)
IfIn(ByRef var, MatchList)
IfNotIn(ByRef var, MatchList)
IfContains(ByRef var, MatchList)
IfNotContains(ByRef var, MatchList)
IfIs(ByRef var, type)
IfIsNot(ByRef var, type)
ControlGet(Cmd, Value = "", Control = "", WinTitle = "", WinText = "", ExcludeTitle = "", ExcludeText = "")
ControlGetFocus(WinTitle = "", WinText = "", ExcludeTitle = "", ExcludeText = "")
ControlGetText(Control = "", WinTitle = "", WinText = "", ExcludeTitle = "", ExcludeText = "")
DriveGet(Cmd, Value = "")
DriveSpaceFree(Path)
EnvGet(EnvVarName)
FileGetAttrib(Filename = "")
FileGetShortcut(LinkFile, ByRef OutTarget = "", ByRef OutDir = "", ByRef OutArgs = "", ByRef OutDescription = "", ByRef OutIcon = "", ByRef OutIconNum = "", ByRef OutRunState = "")
FileGetSize(Filename = "", Units = "")
FileGetTime(Filename = "", WhichTime = "")
FileGetVersion(Filename = "")
FileRead(Filename)
FileReadLine(Filename, LineNum)
FileSelectFile(Options = "", RootDir = "", Prompt = "", Filter = "")
FileSelectFolder(StartingFolder = "", Options = "", Prompt = "")
FormatTime(YYYYMMDDHH24MISS = "", Format = "")
GetKeyState(WhichKey , Mode = "")
GuiControlGet(Subcommand = "", ControlID = "", Param4 = "")
ImageSearch(ByRef OutputVarX, ByRef OutputVarY, X1, Y1, X2, Y2, ImageFile)
IniRead(Filename, Section, Key, Default = "")
Input(Options = "", EndKeys = "", MatchList = "")
InputBox(Title = "", Prompt = "", HIDE = "", Width = "", Height = "", X = "", Y = "", Font = "", Timeout = "", Default = "")
MouseGetPos(ByRef OutputVarX = "", ByRef OutputVarY = "", ByRef OutputVarWin = "", ByRef OutputVarControl = "", Mode = "")
PixelGetColor(X, Y, RGB = "")
PixelSearch(ByRef OutputVarX, ByRef OutputVarY, X1, Y1, X2, Y2, ColorID, Variation = "", Mode = "")
Random(Min = "", Max = "")
RegRead(RootKey, SubKey, ValueName = "")
Run(Target, WorkingDir = "", Mode = "")
SoundGet(ComponentType = "", ControlType = "", DeviceNumber = "")
SoundGetWaveVolume(DeviceNumber = "")
StatusBarGetText(Part = "", WinTitle = "", WinText = "", ExcludeTitle = "", ExcludeText = "")
SplitPath(ByRef InputVar, ByRef OutFileName = "", ByRef OutDir = "", ByRef OutExtension = "", ByRef OutNameNoExt = "", ByRef OutDrive = "")
StringGetPos(ByRef InputVar, SearchText, Mode = "", Offset = "")
StringLeft(ByRef InputVar, Count)
StringLen(ByRef InputVar)
StringLower(ByRef InputVar, T = "")
StringMid(ByRef InputVar, StartChar, Count , L = "")
StringReplace(ByRef InputVar, SearchText, ReplaceText = "", All = "")
StringRight(ByRef InputVar, Count)
StringTrimLeft(ByRef InputVar, Count)
StringTrimRight(ByRef InputVar, Count)
StringUpper(ByRef InputVar, T = "")
SysGet(Subcommand, Param3 = "")
Transform(Cmd, Value1, Value2 = "")
WinGet(Cmd = "", WinTitle = "", WinText = "", ExcludeTitle = "", ExcludeText = "")
WinGetActiveTitle()
WinGetClass(WinTitle = "", WinText = "", ExcludeTitle = "", ExcludeText = "")
WinGetText(WinTitle = "", WinText = "", ExcludeTitle = "", ExcludeText = "")
WinGetTitle(WinTitle = "", WinText = "", ExcludeTitle = "", ExcludeText = "")


[Gdip (1.44 modified by fincs).ahk]
UpdateLayeredWindow(hwnd, hdc, x="", y="", w="", h="", Alpha=255)
BitBlt(ddc, dx, dy, dw, dh, sdc, sx, sy, Raster="")
StretchBlt(ddc, dx, dy, dw, dh, sdc, sx, sy, sw, sh, Raster="")
SetStretchBltMode(hdc, iStretchMode=4)
SetImage(hwnd, hBitmap)
SetSysColorToControl(hwnd, SysColor=15)
Gdip_BitmapFromScreen(Screen=0, Raster="")
Gdip_BitmapFromHWND(hwnd)
CreateRectF(ByRef RectF, x, y, w, h)
CreateRect(ByRef Rect, x, y, w, h)
CreateSizeF(ByRef SizeF, w, h)
CreatePointF(ByRef PointF, x, y)
CreateDIBSection(w, h, hdc="", bpp=32, ByRef ppvBits=0)
PrintWindow(hwnd, hdc, Flags=0)
DestroyIcon(hIcon)
PaintDesktop(hdc)
CreateCompatibleBitmap(hdc, w, h)
CreateCompatibleDC(hdc=0)
SelectObject(hdc, hgdiobj)
DeleteObject(hObject)
GetDC(hwnd=0)
GetDCEx(hwnd, flags=0, hrgnClip=0)
ReleaseDC(hdc, hwnd=0)
DeleteDC(hdc)
Gdip_LibraryVersion()
Gdip_BitmapFromBRA(ByRef BRAFromMemIn, File, Alternate=0)
Gdip_DrawRectangle(pGraphics, pPen, x, y, w, h)
Gdip_DrawRoundedRectangle(pGraphics, pPen, x, y, w, h, r)
Gdip_DrawEllipse(pGraphics, pPen, x, y, w, h)
Gdip_DrawBezier(pGraphics, pPen, x1, y1, x2, y2, x3, y3, x4, y4)
Gdip_DrawArc(pGraphics, pPen, x, y, w, h, StartAngle, SweepAngle)
Gdip_DrawPie(pGraphics, pPen, x, y, w, h, StartAngle, SweepAngle)
Gdip_DrawLine(pGraphics, pPen, x1, y1, x2, y2)
Gdip_DrawLines(pGraphics, pPen, Points)
Gdip_FillRectangle(pGraphics, pBrush, x, y, w, h)
Gdip_FillRoundedRectangle(pGraphics, pBrush, x, y, w, h, r)
Gdip_FillPolygon(pGraphics, pBrush, Points, FillMode=0)
Gdip_FillPie(pGraphics, pBrush, x, y, w, h, StartAngle, SweepAngle)
Gdip_FillEllipse(pGraphics, pBrush, x, y, w, h)
Gdip_FillRegion(pGraphics, pBrush, Region)
Gdip_FillPath(pGraphics, pBrush, Path)
Gdip_DrawImagePointsRect(pGraphics, pBitmap, Points, sx="", sy="", sw="", sh="", Matrix=1)
Gdip_DrawImage(pGraphics, pBitmap, dx="", dy="", dw="", dh="", sx="", sy="", sw="", sh="", Matrix=1)
Gdip_SetImageAttributesColorMatrix(Matrix)
Gdip_GraphicsFromImage(pBitmap)
Gdip_GraphicsFromHDC(hdc)
Gdip_GetDC(pGraphics)
Gdip_ReleaseDC(pGraphics, hdc)
Gdip_GraphicsClear(pGraphics, ARGB=0x00ffffff)
Gdip_BlurBitmap(pBitmap, Blur)
Gdip_SaveBitmapToFile(pBitmap, sOutput, Quality=75)
Gdip_GetPixel(pBitmap, x, y)
Gdip_SetPixel(pBitmap, x, y, ARGB)
Gdip_GetImageWidth(pBitmap)
Gdip_GetImageHeight(pBitmap)
Gdip_GetImageDimensions(pBitmap, ByRef Width, ByRef Height)
Gdip_GetDimensions(pBitmap, ByRef Width, ByRef Height)
Gdip_GetImagePixelFormat(pBitmap)
Gdip_GetDpiX(pGraphics)
Gdip_GetDpiY(pGraphics)
Gdip_GetImageHorizontalResolution(pBitmap)
Gdip_GetImageVerticalResolution(pBitmap)
Gdip_BitmapSetResolution(pBitmap, dpix, dpiy)
Gdip_CreateBitmapFromFile(sFile, IconNumber=1, IconSize="")
Gdip_CreateBitmapFromHBITMAP(hBitmap, Palette=0)
Gdip_CreateHBITMAPFromBitmap(pBitmap, Background=0xffffffff)
Gdip_CreateBitmapFromHICON(hIcon)
Gdip_CreateHICONFromBitmap(pBitmap)
Gdip_CreateBitmap(Width, Height, Format=0x26200A)
Gdip_CreateBitmapFromClipboard()
Gdip_SetBitmapToClipboard(pBitmap)
Gdip_CloneBitmapArea(pBitmap, x, y, w, h, Format=0x26200A)
Gdip_CreatePen(ARGB, w)
Gdip_CreatePenFromBrush(pBrush, w)
Gdip_BrushCreateSolid(ARGB=0xff000000)
Gdip_BrushCreateHatch(ARGBfront, ARGBback, HatchStyle=0)
Gdip_CreateTextureBrush(pBitmap, WrapMode=1, x=0, y=0, w="", h="")
Gdip_CreateLineBrush(x1, y1, x2, y2, ARGB1, ARGB2, WrapMode=1)
Gdip_CreateLineBrushFromRect(x, y, w, h, ARGB1, ARGB2, LinearGradientMode=1, WrapMode=1)
Gdip_CloneBrush(pBrush)
Gdip_DeletePen(pPen)
Gdip_DeleteBrush(pBrush)
Gdip_DisposeImage(pBitmap)
Gdip_DeleteGraphics(pGraphics)
Gdip_DisposeImageAttributes(ImageAttr)
Gdip_DeleteFont(hFont)
Gdip_DeleteStringFormat(hFormat)
Gdip_DeleteFontFamily(hFamily)
Gdip_DeleteMatrix(Matrix)
Gdip_TextToGraphics(pGraphics, Text, Options, Font="Arial", Width="", Height="", Measure=0)
Gdip_DrawString(pGraphics, sString, hFont, hFormat, pBrush, ByRef RectF)
Gdip_MeasureString(pGraphics, sString, hFont, hFormat, ByRef RectF)
Gdip_SetStringFormatAlign(hFormat, Align)
Gdip_StringFormatCreate(Format=0, Lang=0)
Gdip_FontCreate(hFamily, Size, Style=0)
Gdip_FontFamilyCreate(Font)
Gdip_CreateAffineMatrix(m11, m12, m21, m22, x, y)
Gdip_CreateMatrix()
Gdip_CreatePath(BrushMode=0)
Gdip_AddPathEllipse(Path, x, y, w, h)
Gdip_AddPathPolygon(Path, Points)
Gdip_DeletePath(Path)
Gdip_SetTextRenderingHint(pGraphics, RenderingHint)
Gdip_SetInterpolationMode(pGraphics, InterpolationMode)
Gdip_SetSmoothingMode(pGraphics, SmoothingMode)
Gdip_SetCompositingMode(pGraphics, CompositingMode=0)
Gdip_Startup()
Gdip_Shutdown(pToken)
Gdip_RotateWorldTransform(pGraphics, Angle, MatrixOrder=0)
Gdip_ScaleWorldTransform(pGraphics, x, y, MatrixOrder=0)
Gdip_TranslateWorldTransform(pGraphics, x, y, MatrixOrder=0)
Gdip_ResetWorldTransform(pGraphics)
Gdip_GetRotatedTranslation(Width, Height, Angle, ByRef xTranslation, ByRef yTranslation)
Gdip_GetRotatedDimensions(Width, Height, Angle, ByRef RWidth, ByRef RHeight)
Gdip_SetClipRect(pGraphics, x, y, w, h, CombineMode=0)
Gdip_SetClipPath(pGraphics, Path, CombineMode=0)
Gdip_ResetClip(pGraphics)
Gdip_GetClipRegion(pGraphics)
Gdip_SetClipRegion(pGraphics, Region, CombineMode=0)
Gdip_CreateRegion()
Gdip_DeleteRegion(Region)
Gdip_LockBits(pBitmap, x, y, w, h, ByRef Stride, ByRef Scan0, ByRef BitmapData, LockMode = 3, PixelFormat = 0x26200a)
Gdip_UnlockBits(pBitmap, ByRef BitmapData)
Gdip_SetLockBitPixel(ARGB, Scan0, x, y, Stride)
Gdip_GetLockBitPixel(Scan0, x, y, Stride)
Gdip_PixelateBitmap(pBitmap, ByRef pBitmapOut, BlockSize)
Gdip_ToARGB(A, R, G, B)
Gdip_FromARGB(ARGB, ByRef A, ByRef R, ByRef G, ByRef B)
Gdip_AFromARGB(ARGB)
Gdip_RFromARGB(ARGB)
Gdip_GFromARGB(ARGB)
Gdip_BFromARGB(ARGB)


[Gdip.ahk]
UpdateLayeredWindow(hwnd, hdc, x="", y="", w="", h="", Alpha=255)
BitBlt(ddc, dx, dy, dw, dh, sdc, sx, sy, Raster="")
StretchBlt(ddc, dx, dy, dw, dh, sdc, sx, sy, sw, sh, Raster="")
SetStretchBltMode(hdc, iStretchMode=4)
SetImage(hwnd, hBitmap)
SetSysColorToControl(hwnd, SysColor=15)
Gdip_BitmapFromScreen(Screen=0, Raster="")
Gdip_BitmapFromHWND(hwnd)
CreateRectF(ByRef RectF, x, y, w, h)
CreateRect(ByRef Rect, x, y, w, h)
CreateSizeF(ByRef SizeF, w, h)
CreatePointF(ByRef PointF, x, y)
CreateDIBSection(w, h, hdc="", bpp=32, ByRef ppvBits=0)
PrintWindow(hwnd, hdc, Flags=0)
DestroyIcon(hIcon)
PaintDesktop(hdc)
CreateCompatibleBitmap(hdc, w, h)
CreateCompatibleDC(hdc=0)
SelectObject(hdc, hgdiobj)
DeleteObject(hObject)
GetDC(hwnd=0)
GetDCEx(hwnd, flags=0, hrgnClip=0)
ReleaseDC(hdc, hwnd=0)
DeleteDC(hdc)
Gdip_LibraryVersion()
Gdip_BitmapFromBRA(ByRef BRAFromMemIn, File, Alternate=0)
Gdip_DrawRectangle(pGraphics, pPen, x, y, w, h)
Gdip_DrawRoundedRectangle(pGraphics, pPen, x, y, w, h, r)
Gdip_DrawEllipse(pGraphics, pPen, x, y, w, h)
Gdip_DrawBezier(pGraphics, pPen, x1, y1, x2, y2, x3, y3, x4, y4)
Gdip_DrawArc(pGraphics, pPen, x, y, w, h, StartAngle, SweepAngle)
Gdip_DrawPie(pGraphics, pPen, x, y, w, h, StartAngle, SweepAngle)
Gdip_DrawLine(pGraphics, pPen, x1, y1, x2, y2)
Gdip_DrawLines(pGraphics, pPen, Points)
Gdip_FillRectangle(pGraphics, pBrush, x, y, w, h)
Gdip_FillRoundedRectangle(pGraphics, pBrush, x, y, w, h, r)
Gdip_FillPolygon(pGraphics, pBrush, Points, FillMode=0)
Gdip_FillPie(pGraphics, pBrush, x, y, w, h, StartAngle, SweepAngle)
Gdip_FillEllipse(pGraphics, pBrush, x, y, w, h)
Gdip_FillRegion(pGraphics, pBrush, Region)
Gdip_FillPath(pGraphics, pBrush, Path)
Gdip_DrawImagePointsRect(pGraphics, pBitmap, Points, sx="", sy="", sw="", sh="", Matrix=1)
Gdip_DrawImage(pGraphics, pBitmap, dx="", dy="", dw="", dh="", sx="", sy="", sw="", sh="", Matrix=1)
Gdip_SetImageAttributesColorMatrix(Matrix)
Gdip_GraphicsFromImage(pBitmap)
Gdip_GraphicsFromHDC(hdc)
Gdip_GetDC(pGraphics)
Gdip_ReleaseDC(pGraphics, hdc)
Gdip_GraphicsClear(pGraphics, ARGB=0x00ffffff)
Gdip_BlurBitmap(pBitmap, Blur)
Gdip_SaveBitmapToFile(pBitmap, sOutput, Quality=75)
Gdip_GetPixel(pBitmap, x, y)
Gdip_SetPixel(pBitmap, x, y, ARGB)
Gdip_GetImageWidth(pBitmap)
Gdip_GetImageHeight(pBitmap)
Gdip_GetImageDimensions(pBitmap, ByRef Width, ByRef Height)
Gdip_GetDimensions(pBitmap, ByRef Width, ByRef Height)
Gdip_GetImagePixelFormat(pBitmap)
Gdip_GetDpiX(pGraphics)
Gdip_GetDpiY(pGraphics)
Gdip_GetImageHorizontalResolution(pBitmap)
Gdip_GetImageVerticalResolution(pBitmap)
Gdip_BitmapSetResolution(pBitmap, dpix, dpiy)
Gdip_CreateBitmapFromFile(sFile, IconNumber=1, IconSize="")
Gdip_CreateBitmapFromHBITMAP(hBitmap, Palette=0)
Gdip_CreateHBITMAPFromBitmap(pBitmap, Background=0xffffffff)
Gdip_CreateBitmapFromHICON(hIcon)
Gdip_CreateHICONFromBitmap(pBitmap)
Gdip_CreateBitmap(Width, Height, Format=0x26200A)
Gdip_CreateBitmapFromClipboard()
Gdip_SetBitmapToClipboard(pBitmap)
Gdip_CloneBitmapArea(pBitmap, x, y, w, h, Format=0x26200A)
Gdip_CreatePen(ARGB, w)
Gdip_CreatePenFromBrush(pBrush, w)
Gdip_BrushCreateSolid(ARGB=0xff000000)
Gdip_BrushCreateHatch(ARGBfront, ARGBback, HatchStyle=0)
Gdip_CreateTextureBrush(pBitmap, WrapMode=1, x=0, y=0, w="", h="")
Gdip_CreateLineBrush(x1, y1, x2, y2, ARGB1, ARGB2, WrapMode=1)
Gdip_CreateLineBrushFromRect(x, y, w, h, ARGB1, ARGB2, LinearGradientMode=1, WrapMode=1)
Gdip_CloneBrush(pBrush)
Gdip_DeletePen(pPen)
Gdip_DeleteBrush(pBrush)
Gdip_DisposeImage(pBitmap)
Gdip_DeleteGraphics(pGraphics)
Gdip_DisposeImageAttributes(ImageAttr)
Gdip_DeleteFont(hFont)
Gdip_DeleteStringFormat(hFormat)
Gdip_DeleteFontFamily(hFamily)
Gdip_DeleteMatrix(Matrix)
Gdip_TextToGraphics(pGraphics, Text, Options, Font="Arial", Width="", Height="", Measure=0)
Gdip_DrawString(pGraphics, sString, hFont, hFormat, pBrush, ByRef RectF)
Gdip_MeasureString(pGraphics, sString, hFont, hFormat, ByRef RectF)
Gdip_SetStringFormatAlign(hFormat, Align)
Gdip_StringFormatCreate(Format=0, Lang=0)
Gdip_FontCreate(hFamily, Size, Style=0)
Gdip_FontFamilyCreate(Font)
Gdip_CreateAffineMatrix(m11, m12, m21, m22, x, y)
Gdip_CreateMatrix()
Gdip_CreatePath(BrushMode=0)
Gdip_AddPathEllipse(Path, x, y, w, h)
Gdip_AddPathPolygon(Path, Points)
Gdip_DeletePath(Path)
Gdip_SetTextRenderingHint(pGraphics, RenderingHint)
Gdip_SetInterpolationMode(pGraphics, InterpolationMode)
Gdip_SetSmoothingMode(pGraphics, SmoothingMode)
Gdip_SetCompositingMode(pGraphics, CompositingMode=0)
Gdip_Startup()
Gdip_Shutdown(pToken)
Gdip_RotateWorldTransform(pGraphics, Angle, MatrixOrder=0)
Gdip_ScaleWorldTransform(pGraphics, x, y, MatrixOrder=0)
Gdip_TranslateWorldTransform(pGraphics, x, y, MatrixOrder=0)
Gdip_ResetWorldTransform(pGraphics)
Gdip_GetRotatedTranslation(Width, Height, Angle, ByRef xTranslation, ByRef yTranslation)
Gdip_GetRotatedDimensions(Width, Height, Angle, ByRef RWidth, ByRef RHeight)
Gdip_ImageRotateFlip(pBitmap, RotateFlipType=1)
Gdip_SetClipRect(pGraphics, x, y, w, h, CombineMode=0)
Gdip_SetClipPath(pGraphics, Path, CombineMode=0)
Gdip_ResetClip(pGraphics)
Gdip_GetClipRegion(pGraphics)
Gdip_SetClipRegion(pGraphics, Region, CombineMode=0)
Gdip_CreateRegion()
Gdip_DeleteRegion(Region)
Gdip_LockBits(pBitmap, x, y, w, h, ByRef Stride, ByRef Scan0, ByRef BitmapData, LockMode = 3, PixelFormat = 0x26200a)
Gdip_UnlockBits(pBitmap, ByRef BitmapData)
Gdip_SetLockBitPixel(ARGB, Scan0, x, y, Stride)
Gdip_GetLockBitPixel(Scan0, x, y, Stride)
Gdip_PixelateBitmap(pBitmap, ByRef pBitmapOut, BlockSize)
Gdip_ToARGB(A, R, G, B)
Gdip_FromARGB(ARGB, ByRef A, ByRef R, ByRef G, ByRef B)
Gdip_AFromARGB(ARGB)
Gdip_RFromARGB(ARGB)
Gdip_GFromARGB(ARGB)
Gdip_BFromARGB(ARGB)


[Gdip_All.ahk]
UpdateLayeredWindow(hwnd, hdc, x="", y="", w="", h="", Alpha=255)
BitBlt(ddc, dx, dy, dw, dh, sdc, sx, sy, Raster="")
StretchBlt(ddc, dx, dy, dw, dh, sdc, sx, sy, sw, sh, Raster="")
SetStretchBltMode(hdc, iStretchMode=4)
SetImage(hwnd, hBitmap)
SetSysColorToControl(hwnd, SysColor=15)
Gdip_BitmapFromScreen(Screen=0, Raster="")
Gdip_BitmapFromHWND(hwnd)
CreateRectF(ByRef RectF, x, y, w, h)
CreateRect(ByRef Rect, x, y, w, h)
CreateSizeF(ByRef SizeF, w, h)
CreatePointF(ByRef PointF, x, y)
CreateDIBSection(w, h, hdc="", bpp=32, ByRef ppvBits=0)
PrintWindow(hwnd, hdc, Flags=0)
DestroyIcon(hIcon)
PaintDesktop(hdc)
CreateCompatibleBitmap(hdc, w, h)
CreateCompatibleDC(hdc=0)
SelectObject(hdc, hgdiobj)
DeleteObject(hObject)
GetDC(hwnd=0)
GetDCEx(hwnd, flags=0, hrgnClip=0)
ReleaseDC(hdc, hwnd=0)
DeleteDC(hdc)
Gdip_LibraryVersion()
Gdip_BitmapFromBRA(ByRef BRAFromMemIn, File, Alternate=0)
Gdip_DrawRectangle(pGraphics, pPen, x, y, w, h)
Gdip_DrawRoundedRectangle(pGraphics, pPen, x, y, w, h, r)
Gdip_DrawEllipse(pGraphics, pPen, x, y, w, h)
Gdip_DrawBezier(pGraphics, pPen, x1, y1, x2, y2, x3, y3, x4, y4)
Gdip_DrawArc(pGraphics, pPen, x, y, w, h, StartAngle, SweepAngle)
Gdip_DrawPie(pGraphics, pPen, x, y, w, h, StartAngle, SweepAngle)
Gdip_DrawLine(pGraphics, pPen, x1, y1, x2, y2)
Gdip_DrawLines(pGraphics, pPen, Points)
Gdip_FillRectangle(pGraphics, pBrush, x, y, w, h)
Gdip_FillRoundedRectangle(pGraphics, pBrush, x, y, w, h, r)
Gdip_FillPolygon(pGraphics, pBrush, Points, FillMode=0)
Gdip_FillPie(pGraphics, pBrush, x, y, w, h, StartAngle, SweepAngle)
Gdip_FillEllipse(pGraphics, pBrush, x, y, w, h)
Gdip_FillRegion(pGraphics, pBrush, Region)
Gdip_FillPath(pGraphics, pBrush, Path)
Gdip_DrawImagePointsRect(pGraphics, pBitmap, Points, sx="", sy="", sw="", sh="", Matrix=1)
Gdip_DrawImage(pGraphics, pBitmap, dx="", dy="", dw="", dh="", sx="", sy="", sw="", sh="", Matrix=1)
Gdip_SetImageAttributesColorMatrix(Matrix)
Gdip_GraphicsFromImage(pBitmap)
Gdip_GraphicsFromHDC(hdc)
Gdip_GetDC(pGraphics)
Gdip_ReleaseDC(pGraphics, hdc)
Gdip_GraphicsClear(pGraphics, ARGB=0x00ffffff)
Gdip_BlurBitmap(pBitmap, Blur)
Gdip_SaveBitmapToFile(pBitmap, sOutput, Quality=75)
Gdip_GetPixel(pBitmap, x, y)
Gdip_SetPixel(pBitmap, x, y, ARGB)
Gdip_GetImageWidth(pBitmap)
Gdip_GetImageHeight(pBitmap)
Gdip_GetImageDimensions(pBitmap, ByRef Width, ByRef Height)
Gdip_GetDimensions(pBitmap, ByRef Width, ByRef Height)
Gdip_GetImagePixelFormat(pBitmap)
Gdip_GetDpiX(pGraphics)
Gdip_GetDpiY(pGraphics)
Gdip_GetImageHorizontalResolution(pBitmap)
Gdip_GetImageVerticalResolution(pBitmap)
Gdip_BitmapSetResolution(pBitmap, dpix, dpiy)
Gdip_CreateBitmapFromFile(sFile, IconNumber=1, IconSize="")
Gdip_CreateBitmapFromHBITMAP(hBitmap, Palette=0)
Gdip_CreateHBITMAPFromBitmap(pBitmap, Background=0xffffffff)
Gdip_CreateBitmapFromHICON(hIcon)
Gdip_CreateHICONFromBitmap(pBitmap)
Gdip_CreateBitmap(Width, Height, Format=0x26200A)
Gdip_CreateBitmapFromClipboard()
Gdip_SetBitmapToClipboard(pBitmap)
Gdip_CloneBitmapArea(pBitmap, x, y, w, h, Format=0x26200A)
Gdip_CreatePen(ARGB, w)
Gdip_CreatePenFromBrush(pBrush, w)
Gdip_BrushCreateSolid(ARGB=0xff000000)
Gdip_BrushCreateHatch(ARGBfront, ARGBback, HatchStyle=0)
Gdip_CreateTextureBrush(pBitmap, WrapMode=1, x=0, y=0, w="", h="")
Gdip_CreateLineBrush(x1, y1, x2, y2, ARGB1, ARGB2, WrapMode=1)
Gdip_CreateLineBrushFromRect(x, y, w, h, ARGB1, ARGB2, LinearGradientMode=1, WrapMode=1)
Gdip_CloneBrush(pBrush)
Gdip_DeletePen(pPen)
Gdip_DeleteBrush(pBrush)
Gdip_DisposeImage(pBitmap)
Gdip_DeleteGraphics(pGraphics)
Gdip_DisposeImageAttributes(ImageAttr)
Gdip_DeleteFont(hFont)
Gdip_DeleteStringFormat(hFormat)
Gdip_DeleteFontFamily(hFamily)
Gdip_DeleteMatrix(Matrix)
Gdip_TextToGraphics(pGraphics, Text, Options, Font="Arial", Width="", Height="", Measure=0)
Gdip_DrawString(pGraphics, sString, hFont, hFormat, pBrush, ByRef RectF)
Gdip_MeasureString(pGraphics, sString, hFont, hFormat, ByRef RectF)
Gdip_SetStringFormatAlign(hFormat, Align)
Gdip_StringFormatCreate(Format=0, Lang=0)
Gdip_FontCreate(hFamily, Size, Style=0)
Gdip_FontFamilyCreate(Font)
Gdip_CreateAffineMatrix(m11, m12, m21, m22, x, y)
Gdip_CreateMatrix()
Gdip_CreatePath(BrushMode=0)
Gdip_AddPathEllipse(Path, x, y, w, h)
Gdip_AddPathPolygon(Path, Points)
Gdip_DeletePath(Path)
Gdip_SetTextRenderingHint(pGraphics, RenderingHint)
Gdip_SetInterpolationMode(pGraphics, InterpolationMode)
Gdip_SetSmoothingMode(pGraphics, SmoothingMode)
Gdip_SetCompositingMode(pGraphics, CompositingMode=0)
Gdip_Startup()
Gdip_Shutdown(pToken)
Gdip_RotateWorldTransform(pGraphics, Angle, MatrixOrder=0)
Gdip_ScaleWorldTransform(pGraphics, x, y, MatrixOrder=0)
Gdip_TranslateWorldTransform(pGraphics, x, y, MatrixOrder=0)
Gdip_ResetWorldTransform(pGraphics)
Gdip_GetRotatedTranslation(Width, Height, Angle, ByRef xTranslation, ByRef yTranslation)
Gdip_GetRotatedDimensions(Width, Height, Angle, ByRef RWidth, ByRef RHeight)
Gdip_ImageRotateFlip(pBitmap, RotateFlipType=1)
Gdip_SetClipRect(pGraphics, x, y, w, h, CombineMode=0)
Gdip_SetClipPath(pGraphics, Path, CombineMode=0)
Gdip_ResetClip(pGraphics)
Gdip_GetClipRegion(pGraphics)
Gdip_SetClipRegion(pGraphics, Region, CombineMode=0)
Gdip_CreateRegion()
Gdip_DeleteRegion(Region)
Gdip_LockBits(pBitmap, x, y, w, h, ByRef Stride, ByRef Scan0, ByRef BitmapData, LockMode = 3, PixelFormat = 0x26200a)
Gdip_UnlockBits(pBitmap, ByRef BitmapData)
Gdip_SetLockBitPixel(ARGB, Scan0, x, y, Stride)
Gdip_GetLockBitPixel(Scan0, x, y, Stride)
Gdip_PixelateBitmap(pBitmap, ByRef pBitmapOut, BlockSize)
Gdip_ToARGB(A, R, G, B)
Gdip_FromARGB(ARGB, ByRef A, ByRef R, ByRef G, ByRef B)
Gdip_AFromARGB(ARGB)
Gdip_RFromARGB(ARGB)
Gdip_GFromARGB(ARGB)
Gdip_BFromARGB(ARGB)
StrGetB(Address, Length=-1, Encoding=0)


[GDIPlusHelper.ahk]
FormatHexNumber(_value, _digitNb)
Bin2Hex(ByRef @hexString, ByRef @bin, _byteNb=0)
Hex2Bin(ByRef @bin, _hex, _byteNb=0)
SetNextUInt(ByRef @struct, _value, _bReset=false)
GetNextUInt(ByRef @struct, _bReset=false)
SetNextByte(ByRef @struct, _value, _bReset=false)
GetNextByte(ByRef @struct, _bReset=false)
GetInteger(ByRef @source, _offset = 0, _bIsSigned = false, _size = 4)
SetInteger(ByRef @dest, _integer, _offset = 0, _size = 4)
GetUnicodeString(ByRef @unicodeString, _ansiString)
GetAnsiStringFromUnicodePointer(_unicodeStringPt)
DumpDWORDs(ByRef @bin, _byteNb, _bExtended=false)
DumpDWORDsByAddr(_binAddr, _byteNb, _bExtended=false)
GDIplus_Start()
GDIplus_Stop()
GDIplus_LoadBitmap(ByRef @bitmap, _fileName)
GDIplus_LoadImage(ByRef @image, _fileName)
GDIplus_LoadBitmapFromClipboard(ByRef @bitmap)
GDIplus_SaveImage(_image, _fileName, ByRef @clsidEncoder, ByRef @encoderParams)
GDIplus_GetEncoderCLSID(ByRef @encoderCLSID, _mimeType)
GDIplus_InitEncoderParameters(ByRef @encoderParameters, _paramCount)
GDIplus_AddEncoderParameter(ByRef @encoderParameters, _categoryGUID, ByRef @value)


[GDIplusWrapper.ahk]
GDIplus_Start()
GDIplus_Stop()
GDIplus_LoadBitmap(ByRef @bitmap, _fileName)
GDIplus_LoadImage(ByRef @image, _fileName)
GDIplus_LoadBitmapFromClipboard(ByRef @bitmap)
GDIplus_SaveImage(_image, _fileName, ByRef @clsidEncoder, ByRef @encoderParams)
GDIplus_FreeImage(_image)
GDIplus_GetEncoderCLSID(ByRef @encoderCLSID, _mimeType)
GDIplus_InitEncoderParameters(ByRef @encoderParameters, _paramCount)
GDIplus_AddEncoderParameter(ByRef @encoderParameters, _categoryGUID, ByRef @value)


[Get SC and VK (new).ahk]
WM_ACTIVATE(wp)
SetWindowsHookEx()
LowLevelKeyboardProc(nCode, wParam, lParam)
CallNextHookEx(nCode, wp, lp)
GetKeyNameText(sc)
WM_CHAR(wp)
ShowBall(Text, Title="")
BalloonTip(x, y, sText, sTitle = "", h_icon = 0)


[Get SC and VK.ahk]
GenerateAHKSend(vk, sc)
GenerateAHKHotkey(vk, sc)
KeyboardHook(nCode, wParam, lParam)
GotKey(vkCode, scCode)
SetWindowsHookEx(idHook, pfn)
UnhookWindowsHookEx(hHook)
CallNextHookEx(nCode, wParam, lParam, hHook = 0)


[GetAvailableFileName.ahk]
GetAvailableFileName( GivenFileName, GivenPath = "", StartID = 1 )
GetAvailableFileName_fast( GivenFileName, GivenPath = "", StartID = 1 )


[GetCommonPath.ahk]
GetCommonPath( csidl )


[GetNetWorth.ahk]
IsLiquidAsset(accountTitle)


[GetOSVersion.ahk]
GetOSVersion(ByRef sOSName, ByRef bIs64 = 0, ByRef iServicePack = 0, ByRef bIsNT = 0, ByRef iBuildNumber = 0)


[GetPhoneDataUsage.ahk]
GetDataUsage(page, name)


[GetSentryBalances.ahk]
GetAccountUnitPrice(pageText, accountName)
SentryLogin()


[GetSlackInBudget.ahk]
GetCreditCardProjection(currentCreditBalance, endOfBillingCycle)


[GhettoFcnLib.ahk]
OpenCsv(csvFile)


[GoneIn60s.ahk]
WM_MOUSEMOVE(wParam,lParam)


[grep.ahk]
grep(h, n, ByRef v, s = 1, e = 0, d = "")
grepcsv(h, n, ByRef v, s = 1)


[Gui to select and store 3 hotkeys in ini.ahk]
validateHK(GuiControl)
checkDuplicateHK(num)
setHK(num,INI,GUI)
HotkeyCtrlHasFocus()


[Hide&restore windows via ctrl+win and vice-versa-2.ahk]
HookProc(hWinEventHook, event, hwnd)


[Hide&restore windows via ctrl+win and vice-versa.ahk]
HookProc(hWinEventHook, event, hwnd)


[HLink.ahk]
HLink_Add(hGui, X, Y, W, H, Handler="", Text="'HLink Control':")
HLink_onNotify(Wparam, Lparam, Msg, Hwnd)
HLink(var="", value="~`a")
HLink_add2Form(hParent, Txt, Opt)
	OnLink(hCtrl, Text, Link)


[hotkeys-v2.ahk]
WriteStdout(s)
b64decode(&pszString)
ClipChanged(Type)
OnClipboardChange(ClipChanged)
KeepAliveFunc()


[hotkeys.ahk]
OnClipboardChange("ClipChanged")
b64decode(ByRef pszString)
ClipChanged(Type)


[Hotstring.ahk]
Hotstring(trigger, label, mode := 1, clearTrigger := 1, cond := "")


[Hotstrings.ahk]
hotstrings(k, a = "")


[httpQuery.ahk]
httpQuery(byref Result, lpszUrl, POSTDATA="", HEADERS="")


[HttpQueryInfo.ahk]
HttpQueryInfo(URL, QueryInfoFlag=21, Proxy="", ProxyBypass="")


[HTTPRequest.ahk]
HTTPRequest( url, byref in_POST_out_DATA="", byref inout_HEADERS="", options="" )
( Content_Type = "charset" )
		
HTTPRequest_MD5( byref data, length=-1 )
HTTPRequest_Base64Encode( byref data, length )


[IEReady.ahk]
IEReady(hIESvr = 0)


[ILButton.ahk]
ILButton(HBtn, Images, Cx=16, Cy=16, Align="Left", Margin="1 1 1 1")
Image(HButton, Image, Width="", Height="")


[ImageIt.ahk]
DragBox(ByRef OutX1, ByRef OutY1, ByRef OutX2, ByRef OutY2, Byref OutW="", ByRef OutH="", Color="0000FF")
RestoreCursors()
SetSystemCursor( Cursor = "", cx = 0, cy = 0 )
Imgur_Upload( image_file, Anonymous_API_Key, byref output_XML="" )
CustomProgress( pct, total )
XML_MakePretty( XML, Tab="`t" )


[infogulchEncodings.ahk]
Dec_XML(str)
Enc_XML(str, chars="")
Dec_Uri(str)
Enc_Uri(str)


[ini.ahk]
createConfigFile(Path)
updateConfigFile(Path, ByRef Content)
ini_getValue(ByRef _Content, _Section, _Key, _PreserveSpace = False)
ini_getKey(ByRef _Content, _Section, _Key)
ini_getSection(ByRef _Content, _Section)
ini_getAllValues(ByRef _Content, _Section = "", ByRef _count = "")
ini_getAllKeyNames(ByRef _Content, _Section = "", ByRef _count = "")
ini_getAllSectionNames(ByRef _Content, ByRef _count = "")
ini_replaceValue(ByRef _Content, _Section, _Key, _Replacement = "", _PreserveSpace = False)
ini_replaceKey(ByRef _Content, _Section, _Key, _Replacement = "")
ini_replaceSection(ByRef _Content, _Section, _Replacement = "")
ini_insertValue(ByRef _Content, _Section, _Key, _Value, _PreserveSpace = False)
ini_insertKey(ByRef _Content, _Section, _Key)
ini_insertSection(ByRef _Content, _Section, _Keys = "")
ini_load(ByRef _Content, _Path = "", _convertNewLine = false)
ini_save(ByRef _Content, _Path = "", _convertNewLine = true, _overwrite = true)
ini_buildPath(ByRef _path)
ini_repair(_Content, _PreserveSpace = False, _CommentSymbols = ";#", _LineDelim = "`n")
ini_mergeKeys(ByRef _Content, ByRef _source, _updateMode = 1)
ini_exportToGlobals(ByRef _Content, _CreateIndexVars = false, _Prefix = "ini", _Seperator = "_", _SectionSpaces = "", _PreserveSpace = False)
Ini_Read(ByRef _OutputVar, ByRef _Content, _Section, _Key, _Default = "ERROR")
Ini_Write(_Value, ByRef _Content, _Section, _Key)
Ini_Delete(ByRef _Content, _Section, _Key = "")


[IPC.ahk]
IPC_Send(Hwnd, Data="", Port=100, DataSize="")
IPC_SetHandler( Handler )
IPC_onCopyData(WParam, LParam)


[ircClient.ahk]
dataprocess(socket,data)
appendToScrollback(textToAppend)
send(data)
nick()
awaynick()
channel()
checkIfAfk()
changeNick(newNick)


[IsFullScreen.ahk]
IsFullscreen(sWinTitle = "A", bRefreshRes = False)


[iWeb.ahk]
	iWeb_Init()
	
	iWeb_Term()
	
	iWeb_newIe()
	
	iWeb_Model(h=550,w=900)
	
	iWeb_getwin(Name="")
	
	iWeb_Release(pdsp)
	
iWeb_DomWin(pdsp,frm="")
iWeb_inpt(i)
	iWeb_getDomObj(pwb,obj,frm="")
	
	iWeb_setDomObj(pwb,obj,t,frm="")
	
	iWeb_Checked(pwb,obj,checked=1,sIndex=0,frm="")
	
	iWeb_SelectOption(pdsp,sName,selected,method="selectedIndex",frm="")
	
	iWeb_TableParse(pdsp,table,row,cell,frm="")
	
iWeb_FireEvents(ele)
iWeb_TableLength(pdsp,TableRows="",TableRowsCells="",frm="")
	iWeb_clickDomObj(pwb,obj,frm="")
	
	iWeb_clickText(pwb,t,frm="")
	
	iWeb_clickHref(pwb,t,frm="")
	
	iWeb_clickValue(pwb,t,frm="")
	
	iWeb_execScript(pwb,js,frm="")
	
	iWeb_getVar(pwb,var,frm="")
	
	iWeb_escape_text(txt)
	
	iWeb_striphtml(HTML)
	
iWeb_Txt2Doc(t)
iWeb_Activate(sTitle)


[JRWTools.ahk]
searchRegexString(_searchString,_searchIn)
UserObjectADQuery(_object)
InstallMSI(_Software)
Check_Network_Alive(_PingHost)
GetWindowsVersion()
GetUserHomeDir()
TurnOnNumlock()
HasWorkstation()
IsLocalDrive(_Path)
Hex(Inp,UC = 0)
Asc(Inp,UC = 0)
SetDNSServers(_NameServers, _DomainName, _DNSSearchOrder)
DisableNetBios()
OSBitVersion()
GetOfficeBitsize()
UsersDepartment(_Dept)
UsersExt()
UsersHomeLocation()
UserIsMemberOf(_User)
GroupsInGroup(_Group)
GetAllUsers()
GetAllGroups()
IsUserInADGroup(_GroupName, _User = "", recurse = 1)
SearchArray(_needle,_haystack)
UserInOU(_OUName)
MapDrivesByGroup(_GroupName,_DriveLetter,_DrivePath)
RemoveMappedDrive(_RDriveLetter)
RemoveDocPrinters()
USBNoSleep()
SetTime(_NetworkTimeServer)
StdoutToVar_CreateProcess(sCmd, bStream = "", sDir = "", sInput = "")
CreateFilePath(_FilePath)
FindDistinguishedName(_Item)
IsInstalled(_Software)
ProgressMeter(_Percent=0, _Message="Message Not Set", _2Message="We recommend waiting until this is complete before using your PC.", _TitleBar="KEMBA Login Script")
SetOfficeTemplatesLocation(_OfficeTemplates)
HasOffice(_OfficeVersion=-1)
CleanOutlookTemp()
GetOutlookVersion()
CloseOutlook()
SetupOutlook(_SettingsINI, wipe=0, _MailSectionName="Outlook")
CreateOutlookPRF()
OutlookProfileCount()
RemoveOfficeProfile( _ProfileName )
RunBackgroundOutlook()
RestoreOutlookLoginBit(_RegistryKeys)
FlipOutlookLoginBit()
OutlookSignatures(_MailSectionName)
ParseSignatureFiles(_FileTemplateBaseName)
SetOutlookSignatureNames(_Profile, _Fullsig, _Replysig)


[json.ahk]
json(ByRef js, s, v = "")


[KeepNetworkHardDrivesActive.ahk]
InitializeConnection(path)


[KillTrayIcon.ahk]
KillTrayIcon(scriptHwnd)


[LabelControlFixed.ahk]
GetTVPath()
GetHandles()
FindWindowExID(dlg, className, ctrlId)
RemoteBuf_Open(p_handle, p_size)
RemoteBuf_Close(p_bufHandle)
RemoteBuf_Read(p_bufHandle, byref p_localBuf, p_size, p_offset = 0)
RemoteBuf_Write(p_bufHandle, byref p_local, p_size, p_offset=0)
RemoteBuf_GetAdr(p_handle)
RemoteBuf_GetSize(p_handle)
COMPARE(color1,color2)
WM_MOUSEMOVE(wParam,lParam)
WM_CTLCOLOREDIT1(wParam,lParam)
WM_CTLCOLOREDIT(wParam,lParam)


[LaunchPidgin.ahk]
joinIrc(channel)
startGchat(user)
ss()


[LaunchSSMS.ahk]
ss()


[lib_gmail.ahk]
SendGmail(sSubject, sAttach, sTo, sReplyTo, sBody, sUsername, sPassword, sFrom="", sServer="smtp.gmail.com", nPort=25, bTLS=true, nSend=2, nAuth=1)


[lib_json.ahk]
__json_init()
JSON_save(obj, filename, spacing=35, block="    ", level=1)
JSON_load(filename)
JSON_error(s)
JSON_escape(s)
JSON_unescape(s)
JSON_to(obj, spacing = 50, block = "    ", level = "1" )
JSON_init()
JSON_reduce_spaces(c)
JSON_reduce_keyvalue(c)
JSON_reduce_array(c)
JSON_reduce_object(c)
JSON_from(s)
JSON_shift(s, pos, symbols, ret)
JSON_reduce(symbols, ret)


[ListenToCarTalk.ahk]
ss()


[ListIncludes.ahk]
ListIncludes_Recursive(ByRef list, script_file, script_dir, delim)
ListIncludes_GetFullPathName(relative_path)


[LiveDbWarning.ahk]
overlayMessage(message)


[MainLogon.ahk]
CheckForFavorites()
LoginTrack()
MakeShortcuts()
DisableWtime()
SetTimeWin7()
IniFileCleanup()


[MakeNightlyCsvsFromIni.ahk]
CreateCSV(ini, csv, headings)


[MasterScript.ahk]
showGUI()
guiSize()
guiClose()
tabSwitch()
exitApp()
fillFoldersTV()
fillBookmarksLV()
fillAutorunsLV()
fillProcessesLV()
fillAssistantsLV()
buildTree(folder, parentItemID = 0)
bookmarkSelected()
addBookmarkToLV(pathToFile_S)
addAutorun()
addEditPA()		
deleteSelected()
statusbarUpdate(fileCount, size, path)
folderTV()
fileLV()
bookmarksLV()
autorunsLV()
processesLV()
assistantsLV()
runSelected()
(activeControl == "processesLV")
	
getSelectedRows(backwardsOrder_B := 0)
getScriptNames()
getPIDs()
getScriptPaths()
isProcessSuspended(processID_N)
getScriptState(processID_N)
arr2ASV(input_A, separator_S := "|")
ASV2Arr(input_S, separator_S := "|")
ifArraysMatch(comparandA_A, comparandB_A)
fixFSFOutput(input_S)
arrayRemoveDuplicates(ByRef input_A)
sortArrayBackwards(ByRef input_A)
run(paths_A)
kill(pids_A)
killAndReRun()
commandScript(pids_A, wParam)
toggleSuspendProcess()
ProcessCreate_OnObjectReady(SWbemSink_O)
ProcessDelete_OnObjectReady(SWbemSink_O)
assist(process_S := "", alive_B := 0)
hideSelectedProcessesTrayIcons()
hideTrayIconsByPIDs(pids_A)
ahkProcessRestoreTrayIcon()
LV_SetCellIcon(lvHWND, row, column, iconIdxInIL)
restoreTrayIcon(ahkScriptHWND)
showTrayMenu()
TrayIcon_GetInfo(sExeName := "")
(sExeName = pID)
			
TrayIcon_GetTrayBar()
TrayIcon_Remove(hWnd, uID := 1028)
readSettings(settingsFileOrObj)
writeSettings(oldSettings_O, settings_O, settingsPath)


[MCI.ahk]
MCI_Open(p_MediaFile,p_Alias="",p_Flags="")
MCI_OpenCDAudio(p_Drive="",p_Alias="",p_CheckForMedia=true)
MCI_Close(p_lpszDeviceID)
MCI_Play(p_lpszDeviceID,p_Flags="",p_Callback="",p_hwndCallback=0)
MCI_Notify(wParam,lParam,msg,hWnd)
MCI_Stop(p_lpszDeviceID)
MCI_Pause(p_lpszDeviceID)
MCI_Resume(p_lpszDeviceID)
MCI_Record(p_lpszDeviceID,p_Flags="")
MCI_Save(p_lpszDeviceID,p_FileName)
MCI_Seek(p_lpszDeviceID,p_Position)
MCI_Length(p_lpszDeviceID,p_Track=0)
MCI_Status(p_lpszDeviceID)
MCI_Position(p_lpszDeviceID,p_Track=0)
MCI_DeviceType(p_lpszDeviceID)
MCI_MediaIsPresent(p_lpszDeviceID)
MCI_TrackIsAudio(p_lpszDeviceID,p_Track=1)
MCI_CurrentTrack(p_lpszDeviceID)
MCI_NumberOfTracks(p_lpszDeviceID)
MCI_SetVolume(p_lpszDeviceID,p_Factor)
MCI_SetBass(p_lpszDeviceID,p_Factor)
MCI_SetTreble(p_lpszDeviceID,p_Factor)
MCI_ToMilliseconds(Hour,Min,Sec)
MCI_ToHHMMSS(p_ms,p_MinimumSize=4)
MCI_SendString(p_lpszCommand,ByRef p_lpszReturnString,p_hwndCallback=0)


[MCode.ahk]
MCode(ByRef code, hex)


[md5.ahk]
MD5_File( sFile="", cSz=4 )
MD5( ByRef V, L=0 )


[Meta Shortcut.ahk]
chopString(string, delimiter = ".", nthPart = 0)


[MetaDescription for Windows Explorer.ahk]
Explorer_GetWindow()
Explorer_GetFiles()
getDescription()
setDescription(file, description)


[MetaxalRecorder.ahk]
add_log(cmd, params)
logkey(v)
ShellMessage(wParam, lParam)
hotkeys(on = true)
EditWordBreakProc(lpch, ichCurrent, cch, code)


[mg.ahk]
MG_GetMove(Angle)
MG_GetAngle(StartX, StartY, EndX, EndY)
MG_GetRadius(StartX, StartY, EndX, EndY)
MG_Recognize(MGHotkey="", ToolTip=0, MaxMoves=3, ExecuteMGFunction=1, SendIfNoDrag=1)


[MI.ahk]
MI_SetMenuItemIcon(MenuNameOrHandle, ItemPos, FilenameOrHICON, IconNumber=1, IconSize=0, ByRef unused1="", ByRef unused2="")
MI_RemoveIcons(MenuNameOrHandle)
MI_SetMenuItemBitmap(MenuNameOrHandle, ItemPos, hBitmap)
MI_GetMenuHandle(menu_name)
MI_SetMenuStyle(MenuNameOrHandle, style)
MI_ExtractIcon(Filename, IconNumber, IconSize)
MI_EnableOwnerDrawnMenus(hwnd="")
MI_ShowMenu(MenuNameOrHandle, x="", y="")
MI_OwnerDrawnMenuItemWndProc(hwnd, Msg, wParam, lParam)
MI_GetBitmapFromIcon32Bit(h_icon, width=0, height=0)
MI_DllProcAorW(dll, func)


[middleClickInstantScroll.ahk]
Acc_ObjectFromPoint(ByRef _idChild_ = "", x = "", y = "")
isVarInArr(variable, array)


[MintGetAccountBalances.ahk]
GetRegEx(tag, contents="")
GrabDataFromPage(page, id)


[MintLogin.ahk]
mintLogin()


[Mount.ahk]
Mount(SourcePath = "", Mountpoint = "", Options = "")
Mount_UnMount(Mountpoint = "", Options = "")
Mount_GetMountPathes(ByRef pPathes)
Mount_GetMount(pPath = "")


[MouseDistance (copy).ahk]
Remove_Decimal(Temp_Number)
Reduce_Decimal(Temp_Number)


[MouseDistance.ahk]
Remove_Decimal(Temp_Number)
Reduce_Decimal(Temp_Number)


[MouseExtras+.ahk]
KDE_WinMove(sButton)


[MouseExtras.ahk]
KDE_WinMove(sButton)


[MouseKeyboardCounter.ahk]
Format_To_7(Temp_Number)
AddOtherKeys()
AddNumpadKeys()


[MoveOut.ahk]
WM_MOUSEMOVE(wParam,lParam)


[msTill.ahk]
msTill(Time)


[Notify.ahk]
Notify(Title="!!!",Message="",Duration=30,Options="",Image="")


[OCR-preview.ahk]
keyIsPressed(key)


[OCR-tests.ahk]
hi()
returnstrue()
returnsfalse()
DynamicallyRunTest(testName)
QGThello()
QGTindecision()
QGTrecognition()
QGTgigantic()
QuickGuiUsingDynamicText(expected)
GhettoBasicTest()


[OCR.ahk]
GetOCR(topLeftX, topLeftY, widthToScan, heightToScan, isDebugMode=false)


[PackageOcrLibForRelease.ahk]
DeletePrepFolder()
CopyFilesToPrepFolder()
RunTestsFromPrepFolder()
AssignGlobals()


[Persistent2.ahk]
DontWaitToClosePreviousInstance(ahkToClose)


[pgArray.ahk]
pgArray_Insert( ArrayName, Idx, p1, p2="", p3="", p4="", p5="" )
pgArray_Shift( ArrayName, Idx=1, HowFar=1 )
pgArray_Rotate( ArrayName, FromIdx, ToIdx )
pgArray_Swap( ByRef Var1, ByRef Var2 )


[pgTable.ahk]
getColMaxWidth(colN)


[ping.ahk]
ping_Host2IP(name)
ping_DW2IP(adr)


[ping2.ahk]
GetTextLines(FilePath)
Ping(SiteOrIP, ByRef AverageVar, ByRef MinimumVar, ByRef MaximumVar, ByRef StatusVar, ByRef LossVar, PingCount = 1, AltIP = 0, Timeout = 0)


[player1script.ahk]
LiquidGravityDFindNearestEnemy(1currentunit)


[player2script.ahk]
CamerBmove(2currentunit, 2Dir)
CamerBGetTravelDirection(xDistance, yDistance)


[player_aggromorph.ahk]
StuckRand()
AggromorphGetTravelDirection(xDistance, yDistance)


[player_Camerb.ahk]
CamerBmove(2currentunit, 2Dir)
CamerBGetTravelDirection(xDistance, yDistance)


[player_CamerB4fun.ahk]
CamerB4funmove(2currentunit, 2Dir)
CamerB4funGetTravelDirection(xDistance, yDistance)
CamerB4funDistanceFormula(x1, y1, x2, y2)
debug(text1="yo", text2="", text3="")


[player_CamerBX.ahk]
CamerBXmove(2currentunit, 2Dir)
CamerBXGetTravelDirection(xDistance, yDistance)


[player_LiquidGravityD.ahk]
LiquidGravityDFindNearestEnemy(1currentunit)


[ProcessBotEmails.ahk]
examineEmail(emailFile)
ProcessSingleEmail(emailSubject, emailMessage)


[ProcessInfo.ahk]
ProcessInfo_GetCurrentProcessID()
ProcessInfo_GetCurrentParentProcessID()
ProcessInfo_GetProcessName(ProcessID)
ProcessInfo_GetParentProcessID(ProcessID)
ProcessInfo_GetProcessThreadCount(ProcessID)
ProcessInfo_GetProcessInformation(ProcessID, CallVariableType, VariableCapacity, DataOffset)


[rand.ahk]
Rand( a=0.0, b=1 )


[RandomUniqNum.ahk]
RandomUniqNum(Min,Max,N)


[Rebar.ahk]
Rebar_Add(hGui, Style="", hIL="", Pos="", Handler="")
Rebar_Count(hRebar)
Rebar_DeleteBand(hRebar, WhichBand)
Rebar_GetBand(hRebar, WhichBand, pQ="", ByRef o1="", ByRef o2="", ByRef o3="", ByRef o4="", ByRef o5="", ByRef o6="", ByRef o7="")
Rebar_GetLayout(hRebar)
Rebar_GetRect(hRebar, WhichBand="", pQ="", ByRef o1="", ByRef o2="", ByRef o3="", ByRef o4="")
Rebar_Height(hRebar)
Rebar_ID2Index(hRebar, Id)
Rebar_Insert(hRebar, hCtrl, o1="", o2="", o3="", o4="", o5="", o6="", o7="", o8="", o9="")
Rebar_Lock(hRebar, Lock="")
Rebar_MoveBand(hRebar, From, To=1)
Rebar_SetBand(hRebar, WhichBand, o1="", o2="", o3="", o4="", o5="", o6="", o7="", o8="", o9="")
Rebar_SetBandState(hRebar, WhichBand, State)
Rebar_SetBandWidth(hRebar, WhichBand, Width)
Rebar_SetBandStyle(hRebar, WhichBand, Style)
Rebar_SetLayout(hRebar, Layout)
Rebar_SizeToRect(hRebar, ByRef RECT="~`a?)
Rebar_ShowBand(hRebar, WhichBand, bShow=true)
Rebar_compileBand(ByRef BAND, hCtrl, ByRef o1="", ByRef o2="", ByRef o3="", ByRef o4="", ByRef o5="", ByRef o6="", ByRef o7="", ByRef o8="", ByRef o9="")
Rebar_add2Form(hParent, Txt, Opt)
Rebar_getStyle( pStyle, pHex = false, ByRef hNegStyle="")
Rebar_getColor(pColor, pAHK = false)
Rebar_onNotify(Wparam, Lparam, Msg, Hwnd)
Rebar_malloc(pSize)
Rebar_mfree(pAdr)
Rebar(var="", value="~`a")


[Recorder.ahk]
logkey(v)
ShellMessage(wParam, lParam)
hotkeys(on = true)
EditWordBreakProc(lpch, ichCurrent, cch, code)
consolidate(v)


[RecordMacro.ahk]
ss()
WinGetHeight(wintitle)


[ReduceBass.ahk]
ForceWinFocus(titleofwin, options="")


[REFPunitTests.ahk]
assert(inContents, reContents, outContents, description)


[Regex.ahk]
	
	__New(N)
	Match(H, N=-1)
	MatchCall(H, F, N=-1)
	MatchSimple(H, Subpat="", N=-1)
	Test(H, N=-1)
	GetGroups(N)


[RegExFileProcessor.ahk]
StripCommands(string)


[regionGetColor.ahk]
regionGetColor(x, y, w, h, hwnd=0)
regionGetColor_AvgBitmap(hbmp, pc)
regionGetColor_SumIntBytes( ByRef arr, len, ByRef a, ByRef r, ByRef g, ByRef b )
regionGetColor_regionWaitColor(color, X, Y, W, H, hwnd=0, interval=100, timeout=5000, a="", b="", c="")
regionGetColor_regionCompareColor(color, x, y, w, h, hwnd=0, a="", b="", c="")
regionGetColor_withinVariation( x, y, a, b="", c="")
regionGetColor_Variation( x, y )
regionGetColor_invertColor(x, a = "")
AvgBitmap(hbmp, pc)
regionGetColor_CreateCompatibleDC(hdc=0)
regionGetColor_CreateCompatibleBitmap(hdc, w, h)
regionGetColor_SelectObject(hdc, hgdiobj)
regionGetColor_GetDC(hwnd=0)
regionGetColor_BitBlt( hdc_dest, x1, y1, w1, h1 , hdc_source, x2, y2 , mode )
regionGetColor_DeleteObject(hObject)
regionGetColor_DeleteDC(hdc)
regionGetColor_ReleaseDC(hwnd, hdc)
regionGetColor_PrintWindow(hwnd, hdc, Flags=0)


[RemoteWidget.ahk]
GetWidgetText()
GetGmailMessageCount(url, prettyName)
UrlDownloadToVarCheck500(url)
InternetIsDown()
CantContact(url)


[RemoteWidget2.ahk]
GetWidgetText()
GetGmailMessageCount(url, prettyName)
UrlDownloadToVarCheck500(url)
InternetIsDown()
CantContact(url)


[ResaveTemporary.ahk]
isValid(num)
ShowPreviewOfAllTempAhks()


[RestoreBass.ahk]
ForceWinFocus(titleofwin, options="")


[RichEdit.ahk]
RichEdit_Add(HParent, X="", Y="", W="", H="", Style="", Text="")
RichEdit_AutoUrlDetect(HCtrl, Flag="" )
(Flag ="^")
RichEdit_CanPaste(hEdit, ClipboardFormat=0x1)
RichEdit_CharFromPos(hEdit,X,Y)
RichEdit_Clear(hEdit)
RichEdit_Convert(Input, Direction=0)
RichEdit_Copy(hEdit)
RichEdit_Cut(hEdit)
OnFind(Event, Flags, FindText, ReplaceText)
RichEdit_FindText(hEdit, Text, CpMin=0, CpMax=-1, Flags="UNICODE")
RichEdit_FindWordBreak(hCtrl, CharIndex, Flag="")
RichEdit_FixKeys(hCtrl)
RichEdit_GetLine(hEdit, LineNumber=-1)
RichEdit_GetLineCount(hEdit)
RichEdit_GetOptions(hCtrl)
RichEdit_GetCharFormat(hCtrl, ByRef Face="", ByRef Style="", ByRef TextColor="", ByRef BackColor="", Mode="SELECTION")
RichEdit_GetRedo(hCtrl, ByRef name="-")
RichEdit_GetModify(hEdit)
RichEdit_GetParaFormat(hCtrl)
RichEdit_GetRect(hEdit,ByRef Left="",ByRef Top="",ByRef Right="",ByRef Bottom="")
RichEdit_GetSel(hCtrl, ByRef cpMin="", ByRef cpMax="" )
RichEdit_GetText(HCtrl, CpMin="-", CpMax="-", CodePage="")
RichEdit_GetTextLength(hCtrl, Flags=0, CodePage="")
RichEdit_GetUndo(hCtrl, ByRef Name="-")
RichEdit_HideSelection(hCtrl, State=true)
RichEdit_LineFromChar(hCtrl, CharIndex=-1)
RichEdit_LineIndex(hEdit, LineNumber=-1)
RichEdit_LineLength(hEdit, LineNumber=-1)
RichEdit_LineScroll(hEdit,XScroll=0,YScroll=0)
RichEdit_LimitText(hCtrl,txtSize=0)
RichEdit_Paste(hEdit)
RichEdit_PasteSpecial(HCtrl, Format)
RichEdit_PosFromChar(hEdit, CharIndex, ByRef X, ByRef Y)
RichEdit_Redo(hEdit)
RichEdit_ReplaceSel(hEdit, Text="")
RichEdit_Save(hCtrl, FileName="")
RichEdit_ScrollCaret(hEdit)
RichEdit_ScrollPos(HCtrl, PosString="" )
RichEdit_SelectionType(hCtrl)
RichEdit_SetBgColor(hCtrl, Color)
RichEdit_SetCharFormat(HCtrl, Face="", Style="", TextColor="", BackColor="", Mode="SELECTION")
RichEdit_SetEvents(hCtrl, Handler="", Events="selchange")
RichEdit_SetFontSize(hCtrl, Add)
RichEdit_SetModify(hEdit, State=true)
RichEdit_SetOptions(hCtrl, Operation, Options)
RichEdit_PageRotate(hCtrl, R="")
RichEdit_SetParaFormat(hCtrl, o1="", o2="", o3="", o4="", o5="", o6="")
RichEdit_SetEditStyle(hCtrl, Style)
RichEdit_SetSel(hCtrl, CpMin=0, CpMax=0)
RichEdit_SetText(HCtrl, Txt="", Flag=0, Pos="" )
RichEdit_SetUndoLimit(hCtrl, nMax)
RichEdit_ShowScrollBar(hCtrl, Bar, State=true)
RichEdit_TextMode(HCtrl, TextMode="")
RichEdit_WordWrap(HCtrl, Flag)
Richedit_Zoom(hCtrl, zoom=0)
RichEdit_Undo(hCtrl, Reset=false)
RichEdit_add2Form(hParent, Txt, Opt)
RichEdit_onNotify(Wparam, Lparam, Msg, Hwnd)
RichEdit_wndProc(hwnd, uMsg, wParam, lParam)
RichEdit_editStreamCallBack(dwCookie, pbBuff, cb, pcb)
RichEdit(var="", value="~`a", ByRef o1="", ByRef o2="", ByRef o3="", ByRef o4="", ByRef o5="", ByRef o6="")


[RunToVar.ahk]
RunToVar(ByRef Result,CommandLine,WorkingDirectory = "")


[SB.ahk]
SB_SetProgress(Value=0,Seg=1,Ops="")


[sc.ahk]
sc_CaptureScreen(aRect = 0, bCursor = False, sFile = "", nQuality = "")
sc_CaptureCursor(hDC, nL, nT)
sc_Zoomer(hBM, nW, nH, znW, znH)
sc_Convert(sFileFr = "", sFileTo = "", nQuality = "")
sc_CreateDIBSection(hDC, nW, nH, bpp = 32, ByRef pBits = "")
sc_SaveHBITMAPToFile(hBitmap, sFile)
sc_SetClipboardData(hBitmap)
sc_Unicode4Ansi(ByRef wString, sString)
sc_Ansi4Unicode(pString)


[Scheduled-asap.ahk]
TimecardReminder(param)
KillPidgin()


[ScreenCapture.ahk]
CaptureScreen(aRect = 0, bCursor = False, sFile = "", nQuality = "")
CaptureCursor(hDC, nL, nT)
Zoomer(hBM, nW, nH, znW, znH)
Convert(sFileFr = "", sFileTo = "", nQuality = "")
CreateDIBSection(hDC, nW, nH, bpp = 32, ByRef pBits = "")
SaveHBITMAPToFile(hBitmap, sFile)
SetClipboardData(hBitmap)
Unicode4Ansi(ByRef wString, sString)
Ansi4Unicode(pString)


[Script1.ahk]
OnData(Hwnd, Data, Port, Size)


[Script2.ahk]
OnData(Hwnd, Data, Port, Size)


[scrollOverTaskbarToSwitchTasks.ahk]
Num()
TaskBarHovering()
TaskBarPos()


[Search64BitReg.ahk]
FindInstalled()


[SendEmailSimple.ahk]
SendEmailSimple(sSubject, sBody, sAttach="", sTo="cameronbaustian@gmail.com", sReplyTo="cameronbaustian+bot@gmail.com")


[SendEmailSimpleLib.ahk]
SendTheFrigginEmail(sSubject, sAttach, sTo, sReplyTo, sBody, sUsername, sPassword, sFrom="", sServer="smtp.gmail.com", nPort=25, bTLS=true, nSend=2, nAuth=1)


[SendQueuedEmails.ahk]
SendEmailFromIni(file)


[SETUPFUNC.ahk]
SETUP_WELCOMEPAGE(appname,appver,logopic)
SETUP_INSTALLDIRPAGE(appname,appver,pathdir)
SETUP_SPLASHBACK(appname)
SETUP_LICENSEPAGE(appname,appver,licfile)
SETUP_SHORTCUTSPAGE(appname,appver,SMFolder,SMSC,DesktopSC)
SETUP_FINISHPAGE(appname,appver)
SETUP_PROGRESSPAGE(appname,appver)


[ShowOCRUnderMouse.ahk]
RunWaitEx(CMD, CMDdir, CMDin, ByRef CMDout, ByRef CMDerr)


[SilentScreenshotter(+upload).ahk]
Gdip_Startup()
CreateDIBSection(w, h, hdc = "")
Gdip_DrawLines(pGraphics, pPen, Points)
UpdateLayeredWindow(hwnd, hdc, x = "", y = "", w = "", h = "", Alpha = 255)
Gdip_BitmapFromScreen(screen)
Gdip_SaveBitmapToFile(pBitmap, sOutput, quality = 100)


[SOT2ST v0 (unknwn).ahk]
OverTaskBar()


[SOT2ST v1 (doesn't handle stacks).ahk]
IsClassUnderMouse(class)


[SOT2ST v1.5 (+peek preview, +close windows with MMB).ahk]
IsClassUnderMouse(class)
TrayKey(action)


[SOTTST - test3 - small bug with stacks statrting always from 1st item.ahk]
IsActive()
TaskBarPos()
Num()
Acc_ObjectFromWindow(hWnd, idObject = -4)


[SOTTST - test4 - buggy.ahk]
Num()
TaskBarHovering()
TaskBarPos()


[Splitter.ahk]
Splitter_Add(Opt="", Text="", Handler="")
Splitter_Add2Form(HParent, Txt, Opt)
Splitter_GetMax(HSep)
Splitter_GetMin(HSep)
Splitter_GetPos( HSep, Flag="" )
Splitter_GetSize(HSep)
Splitter_Set( HSep, Def, Pos="", Limit=0.0 )
Splitter_SetPos(HSep, Pos, bInternal=false)
Splitter_wndProc(Hwnd, UMsg, WParam, LParam)
Splitter_updateFocus( HSep="" )
Splitter(Var="", Value="~`a?, ByRef o1="", ByRef o2="", ByRef o3="", ByRef o4="", ByRef o5="", ByRef o6="")


[st.ahk]
ST_Dim(ByRef Stack)
ST_Undim(ByRef Stack)
ST_Del(ByRef Stack)
ST_Push(ByRef Stack,Value)
ST_Pop(ByRef Stack)
ST_Peek(ByRef Stack)
ST_Len(ByRef Stack)
ST_Debug(OnOff="")
ST_Convert(Value,Mode=0)
ST_IsValid(ByRef Stack,Dim=0)


[StandDescription.ahk]
	parse(ByRef src, jsonize:=false)
	
	stringify(obj:="", indent:="", lvl:=1)
	
		
		__New(args*)
		
		__Set(key, val, args*)
		
		Insert(key, val)
		
		Remove(args*)
		Count()
		
		stringify(indent:="")
		
		_NewEnum()
		
		Next(ByRef key, ByRef val:="")
		
			
		__New(args*)
		
		stringify(indent:="")
		


[StdoutToVar.ahk]
Stream(sString)
StdoutToVar_CreateProcess(sCmd, bStream = "", sDir = "", sInput = "")
StdoutToVar_CreateProcessCOM(sCmd, bStream = False, sDir = "", sInput = "")


[StringyLauncher.ahk]
launch(input)
waitAndRemove(executable, fileRemoveDir)


[strTail.ahk]
strTail(_Str, _LineNum = 1)
strTail_last(ByRef _Str)


[StrX.ahk]
StrX( H,  BS="",BO=0,BT=1,   ES="",EO=0,ET=1,  ByRef N="" )


[Studio.ahk]
Studio(ico:=0)
	__New(win,parent:="")
	DropFiles(filelist,ctrl,x,y)
	Add(info*)
	Escape()
	savepos()
	Exit()
	Close(a:="")
	Size()
	Show(name)
	__Get()
	GetPos()
	WinPos()
Exit()
m(x*)
t(x*)
	__New(window,info)
	__Get(x*)
	__Call(code,lparam=0,wparam=0,extra="")
	show()
EA(node)
	__New(param*)
	CreateElement(doc,root)
	Search(node,find,return="")
	Lang(info)
	Add(path,att:="",text:="",dup:=0,list:="")
	Find(info*)
	Under(under,node:="",att:="",text:="",list:="")
	SSN(path)
	SN(path)
	__Get(x="")
	Get(path,Default)
	Transform()
	Save(x*)
	EA(path)
SSN(node,path)
SN(node,path)
ATT(node,info)


[SupervisionCore.ahk]
VerifyFireflyCheckin(whoIsCheckingIn)
RestartEverythingForcefully()


[Swap values of 2 vars.ahk]
Swap(ByRef x, ByRef y)


[sXMLget.ahk]
sXMLget( xml, node, attr = "" )


[TaskButton.ahk]
TaskButton(sExeName = "")
TaskButton_Hide(idn, bHide = True)
TaskButton_Delete(idx)
TaskButton_Move(idxOld, idxNew)
TaskButton_GetTaskSwBar()


[TempRunAhkArena.ahk]
AA_Spawn()
AA_Refresh()
AA_DrawUnit(unit)
AA_endturn()
AA_SpawnMineral()
AA_Gather(unit)
Player1Script()
Player2Script()


[TestPing-ahkl.ahk]
CMDret(CMD)


[TestPing.ahk]
CMDret(CMD)


[tf.ahk]
TF_CountLines(Text)
	
TF_ReadLines(Text, StartLine = 1, EndLine = 0, Trailing = 0)
	
TF_ReplaceInLines(Text, StartLine = 1, EndLine = 0, SearchText = "", ReplaceText = "")
	
TF_Replace(Text, SearchText, ReplaceText="")
	
TF_RegExReplaceInLines(Text, StartLine = 1, EndLine = 0, NeedleRegEx = "", Replacement = "")
	
TF_RegExReplace(Text, NeedleRegEx = "", Replacement = "")
	
TF_RemoveLines(Text, StartLine = 1, EndLine = 0)
	
TF_RemoveBlankLines(Text, StartLine = 1, EndLine = 0)
	
TF_RemoveDuplicateLines(Text, StartLine = 1, Endline = 0, Consecutive = 0, CaseSensitive = false)
	
TF_InsertLine(Text, StartLine = 1, Endline = 0, InsertText = "")
	
TF_ReplaceLine(Text, StartLine = 1, Endline = 0, ReplaceText = "")
	
TF_InsertPrefix(Text, StartLine = 1, EndLine = 0, InsertText = "")
	
TF_InsertSuffix(Text, StartLine = 1, EndLine = 0 , InsertText = "")
	
TF_TrimLeft(Text, StartLine = 1, EndLine = 0, Count = 1)
	
TF_TrimRight(Text, StartLine = 1, EndLine = 0, Count = 1)
	
TF_AlignLeft(Text, StartLine = 1, EndLine = 0, Columns = 80, Padding = 0)
	
TF_AlignCenter(Text, StartLine = 1, EndLine = 0, Columns = 80, Padding = 0)
	
TF_AlignRight(Text, StartLine = 1, EndLine = 0, Columns = 80, Skip = 0)
	
TF_ConCat(FirstTextFile, SecondTextFile, OutputFile = "", Blanks = 0, FirstPadMargin = 0, SecondPadMargin = 0)
	
TF_ColGet(Text, StartLine = 1, EndLine = 0, StartColumn = 1, EndColumn = 1, Skip = 0)
	
TF_ColPut(Text, Startline = 1, EndLine = 0, StartColumn = 1, InsertText = "", Skip = 0)
	
TF_ColCut(Text, StartLine = 1, EndLine = 0, StartColumn = 1, EndColumn = 1)
	
TF_ReverseLines(Text, StartLine = 1, EndLine = 0)
	
TF_SplitFileByLines(Text, SplitAt, Prefix = "file", Extension = "txt", InFile = 1)
	
TF_SplitFileByText(Text, SplitAt, Prefix = "file", Extension = "txt",  InFile = 1)
	
TF_Find(Text, StartLine = 1, EndLine = 0, SearchText = "", ReturnFirst = 1, ReturnText = 0)
	
TF_FindLines(Text, StartLine = 1, EndLine = 0, SearchText = "", CaseSensitive = false)
	
TF_Prepend(File1, File2)
	
TF_Append(File1, File2)
	
TF_Merge(FileList, Separator = "`n", FileName = "merged.txt")
	
TF_Wrap(Text, Columns = 80, AllowBreak = 0, StartLine = 1, EndLine = 0)
	
TF_WhiteSpace(Text, RemoveLeading = 1, RemoveTrailing = 1, StartLine = 1, EndLine = 0)
TF_Substract(File1, File2, PartialMatch = 0)
TF_RangeReplace(Text, SearchTextBegin, SearchTextEnd, ReplaceText = "", CaseSensitive = "False", KeepBegin = 0, KeepEnd = 0)
	
TF_MakeFile(Text, Lines = 1, Columns = 1, Fill = " ")
	
TF_Tab2Spaces(Text, TabStop = 4, StartLine = 1, EndLine =0)
	
TF_Spaces2Tab(Text, TabStop = 4, StartLine = 1, EndLine =0)
	
TF_Tail(Text, Lines = 1, RemoveTrailing = 0, ReturnEmpty = 1)
TF_Count(String, Char)
	
TF_Save(Text, FileName, OverWrite = 1)
TF(TextFile, CreateGlobalVar = "T")
TF_GetData(byref OW, byref Text, byref FileName)
	
TF_SetWidth(Text,Width,AlignText)
	
TF_Space(Width)
	
TF_ReturnOutPut(OW, Text, FileName, TrimTrailing = 1, CreateNewFile = 0)
_MakeMatchList(Text, Start = 1, End = 0)
	


[TheEnd.ahk]
WM_MOUSEMOVE(wParam,lParam)


[ThousandsSep.ahk]
ThousandsSep(x, s=",")


[TimeWidget.ahk]
GetWidgetText()


[todWulff.ahk]
Paste2(Paste_Content, Paste_Description="", Paste_Language="text")	
ShortURL(LURL)
jmp_Enc_Uri(uri)
Goo_gl(url)


[Toolbar.ahk]
Toolbar_Add(hGui, Handler, Style="", ImageList="", Pos="")
Toolbar_AutoSize(hCtrl, Align="fit")
Toolbar_Clear(hCtrl)
Toolbar_Count(hCtrl, pQ="c")
Toolbar_CommandToIndex( hCtrl, ID )
Toolbar_Customize(hCtrl)
Toolbar_CheckButton(hCtrl, WhichButton, bCheck=1)
Toolbar_Define(hCtrl, pQ="")
Toolbar_DeleteButton(hCtrl, Pos=1)
Toolbar_GetButton(hCtrl, WhichButton, pQ="")
Toolbar_GetButtonSize(hCtrl, ByRef W, ByRef H)
Toolbar_GetMaxSize(hCtrl, ByRef Width, ByRef Height)
Toolbar_GetRect(hCtrl, Pos="", pQ="")
Toolbar_Insert(hCtrl, Btns, Pos="")
Toolbar_MoveButton(hCtrl, Pos, NewPos)
Toolbar_SetBitmapSize(hCtrl, Width=0, Height=0)
Toolbar_SetButton(hCtrl, WhichButton, State="", Width="")
Toolbar_SetButtonWidth(hCtrl, Min, Max="")
Toolbar_SetDrawTextFlags(hCtrl, Mask, Flags)
Toolbar_SetButtonSize(hCtrl, W, H="")
Toolbar_SetImageList(hCtrl, hIL="1S")
Toolbar_SetMaxTextRows(hCtrl, iMaxRows=0)
Toolbar_ToggleStyle(hCtrl, Style="LIST")
Toolbar_compileButtons(hCtrl, Btns, ByRef cBTN)
Toolbar_onNotify(Wparam,Lparam,Msg,Hwnd)
Toolbar_getButtonArray(hCtrl, ByRef cBtn)
Toolbar_getStateName( hState )
Toolbar_getStyleName( hStyle )
Toolbar_onEndAdjust(hCtrl, cBTN, cnt)
Toolbar_malloc(pSize)
Toolbar_mfree(pAdr)
Toolbar_memmove(dst, src, cnt)
Toolbar_memcpy(dst, src, cnt)
Toolbar_add2Form(hParent, Txt, Opt)
Toolbar(var="", value="~`a", ByRef o1="", ByRef o2="", ByRef o3="", ByRef o4="", ByRef o5="", ByRef o6="")
	OnToolbar(hCtrl, Event, Txt, Pos)


[ToolTip.ahk]
WM_LBUTTONDOWN(wParam,lParam,msg,hWnd)
WM_NOTIFY(wParam, lParam, msg, hWnd)
WM_NOTIFY(wParam,lParam)
ToolTip(ID="", text="", title="",options="")
ToolTip_ExtractIcon(Filename, IconNumber, IconSize)
ToolTip_GetAssociatedIcon(File)


[TransliterateText.ahk]
transformTextLayout(textContainer)


[TrayIcon.ahk]
TrayIcon(sExeName = "")
TrayIcon_Remove(hWnd, uID, nMsg = 0, hIcon = 0, nRemove = 2)
TrayIcon_Hide(idn, bHide = True)
TrayIcon_Delete(idx)
TrayIcon_Move(idxOld, idxNew)
TrayIcon_GetTrayBar()


[TreeView GUI, doesn't track memory, has no list to store info.ahk]
ShortName(LongName)
AddSubFoldersToTree(Folder, ParentItemID = 0)


[TVX.ahk]
TVX( pTree, pSub, pOptions="", pUserData="" )
TVX_Walk(root, label, ByRef event_type, ByRef event_param)
TVX_Move(item, direction)
TVX_CopyProc(iType, item)
TVX_CopyItem(destc, destp, source)
TVX_OnItemSelect(pItemId)
TVX_OnKeyPress(pKey)


[UnHTM.ahk]
UnHTM( HTM )


[UnitTests.ahk]
AssertDebugBool(assert, var)
AssertIsMaximized(assert, var, description)
AssertIsMinimized(assert, var, description)
AssertDirExist(assert, var, description)
AssertForceWinFocusIfExist(assert, var, description)
AssertSendViaClipboard(before, var, description)
AssertGetXmlElement(assert, path, xml, description)


[UpdateAdobeAcrobatReader.ahk]
exit()


[UrlDownloadToVar.ahk]
Download(ByRef Result,URL)


[USBD.ahk]
USBD_SafelyRemove( Drv )
USBD_GetDeviceSerial( Drv="" )
USBD_GetDeviceID( Serial )
USBD_DeviceEject( DeviceID )


[uuid.ahk]
uuid(c = false)


[VA.ahk]
VA_GetMasterVolume(channel="", device_desc="playback")
VA_SetMasterVolume(vol, channel="", device_desc="playback")
VA_GetMasterChannelCount(device_desc="playback")
VA_SetMasterMute(mute, device_desc="playback")
VA_GetMasterMute(device_desc="playback")
VA_GetVolume(subunit_desc="1", channel="", device_desc="playback")
VA_SetVolume(vol, subunit_desc="1", channel="", device_desc="playback")
VA_GetChannelCount(subunit_desc="1", device_desc="playback")
VA_SetMute(mute, subunit_desc="1", device_desc="playback")
VA_GetMute(subunit_desc="1", device_desc="playback")
VA_GetAudioMeter(device_desc="playback")
VA_GetDevicePeriod(device_desc, ByRef default_period, ByRef minimum_period="")
VA_GetAudioEndpointVolume(device_desc="playback")
VA_GetDeviceSubunit(device_desc, subunit_desc, subunit_iid)
VA_FindSubunit(device, target_desc, target_iid)
VA_FindSubunitCallback(part, interface, index)
VA_EnumSubunits(device, callback, target_name="", target_iid="", callback_param="")
VA_EnumSubunitsEx(part, data_flow, callback, target_name="", target_iid="", callback_param="")
VA_GetDevice(device_desc="playback")
VA_GetDeviceName(device)
VA_GUID(ByRef guid_out, guid_in="%guid_out%")
VA_GUIDOut(ByRef guid)
VA_WStrOut(ByRef str)
VA_dB2Scalar(dB, min_dB, max_dB)
VA_Scalar2dB(s, min_dB, max_dB)
VA_IMMDevice_Activate(this, iid, ClsCtx, ActivationParams, ByRef Interface)
VA_IMMDevice_OpenPropertyStore(this, Access, ByRef Properties)
VA_IMMDevice_GetId(this, ByRef Id)
VA_IMMDevice_GetState(this, ByRef State)
VA_IDeviceTopology_GetConnectorCount(this, ByRef Count)
VA_IDeviceTopology_GetConnector(this, Index, ByRef Connector)
VA_IDeviceTopology_GetSubunitCount(this, ByRef Count)
VA_IDeviceTopology_GetSubunit(this, Index, ByRef Subunit)
VA_IDeviceTopology_GetPartById(this, Id, ByRef Part)
VA_IDeviceTopology_GetDeviceId(this, ByRef DeviceId)
VA_IDeviceTopology_GetSignalPath(this, PartFrom, PartTo, RejectMixedPaths, ByRef Parts)
VA_IConnector_GetType(this, ByRef Type)
VA_IConnector_GetDataFlow(this, ByRef Flow)
VA_IConnector_ConnectTo(this, ConnectTo)
VA_IConnector_Disconnect(this)
VA_IConnector_IsConnected(this, ByRef Connected)
VA_IConnector_GetConnectedTo(this, ByRef ConTo)
VA_IConnector_GetConnectorIdConnectedTo(this, ByRef ConnectorId)
VA_IConnector_GetDeviceIdConnectedTo(this, ByRef DeviceId)
VA_IPart_GetName(this, ByRef Name)
VA_IPart_GetLocalId(this, ByRef Id)
VA_IPart_GetGlobalId(this, ByRef GlobalId)
VA_IPart_GetPartType(this, ByRef PartType)
VA_IPart_GetSubType(this, ByRef SubType)
VA_IPart_GetControlInterfaceCount(this, ByRef Count)
VA_IPart_GetControlInterface(this, Index, ByRef InterfaceDesc)
VA_IPart_EnumPartsIncoming(this, ByRef Parts)
VA_IPart_EnumPartsOutgoing(this, ByRef Parts)
VA_IPart_GetTopologyObject(this, ByRef Topology)
VA_IPart_Activate(this, ClsContext, iid, ByRef Object)
VA_IPart_RegisterControlChangeCallback(this, iid, Notify)
VA_IPart_UnregisterControlChangeCallback(this, Notify)
VA_IPartsList_GetCount(this, ByRef Count)
VA_IPartsList_GetPart(this, INdex, ByRef Part)
VA_IAudioEndpointVolume_RegisterControlChangeNotify(this, Notify)
VA_IAudioEndpointVolume_UnregisterControlChangeNotify(this, Notify)
VA_IAudioEndpointVolume_GetChannelCount(this, ByRef ChannelCount)
VA_IAudioEndpointVolume_SetMasterVolumeLevel(this, LevelDB, GuidEventContext="")
VA_IAudioEndpointVolume_SetMasterVolumeLevelScalar(this, Level, GuidEventContext="")
VA_IAudioEndpointVolume_GetMasterVolumeLevel(this, ByRef LevelDB)
VA_IAudioEndpointVolume_GetMasterVolumeLevelScalar(this, ByRef Level)
VA_IAudioEndpointVolume_SetChannelVolumeLevel(this, Channel, LevelDB, GuidEventContext="")
VA_IAudioEndpointVolume_SetChannelVolumeLevelScalar(this, Channel, Level, GuidEventContext="")
VA_IAudioEndpointVolume_GetChannelVolumeLevel(this, Channel, ByRef LevelDB)
VA_IAudioEndpointVolume_GetChannelVolumeLevelScalar(this, Channel, ByRef Level)
VA_IAudioEndpointVolume_SetMute(this, Mute, GuidEventContext="")
VA_IAudioEndpointVolume_GetMute(this, ByRef Mute)
VA_IAudioEndpointVolume_GetVolumeStepInfo(this, ByRef Step, ByRef StepCount)
VA_IAudioEndpointVolume_VolumeStepUp(this, GuidEventContext="")
VA_IAudioEndpointVolume_VolumeStepDown(this, GuidEventContext="")
VA_IAudioEndpointVolume_QueryHardwareSupport(this, ByRef HardwareSupportMask)
VA_IAudioEndpointVolume_GetVolumeRange(this, ByRef MinDB, ByRef MaxDB, ByRef IncrementDB)
VA_IPerChannelDbLevel_GetChannelCount(this, ByRef Channels)
VA_IPerChannelDbLevel_GetLevelRange(this, Channel, ByRef MinLevelDB, ByRef MaxLevelDB, ByRef Stepping)
VA_IPerChannelDbLevel_GetLevel(this, Channel, ByRef LevelDB)
VA_IPerChannelDbLevel_SetLevel(this, Channel, LevelDB, GuidEventContext="")
VA_IPerChannelDbLevel_SetLevelUniform(this, LevelDB, GuidEventContext="")
VA_IPerChannelDbLevel_SetLevelAllChannels(this, LevelsDB, ChannelCount, GuidEventContext="")
VA_IAudioMute_SetMute(this, Muted, GuidEventContext="")
VA_IAudioMute_GetMute(this, ByRef Muted)
VA_IAudioAutoGainControl_GetEnabled(this, ByRef Enabled)
VA_IAudioAutoGainControl_SetEnabled(this, Enable, GuidEventContext="")
VA_IAudioMeterInformation_GetPeakValue(this, ByRef Peak)
VA_IAudioMeterInformation_GetMeteringChannelCount(this, ByRef ChannelCount)
VA_IAudioMeterInformation_GetChannelsPeakValues(this, ChannelCount, PeakValues)
VA_IAudioMeterInformation_QueryHardwareSupport(this, ByRef HardwareSupportMask)
VA_IAudioClient_Initialize(this, ShareMode, StreamFlags, BufferDuration, Periodicity, Format, AudioSessionGuid)
VA_IAudioClient_GetBufferSize(this, ByRef NumBufferFrames)
VA_IAudioClient_GetStreamLatency(this, ByRef Latency)
VA_IAudioClient_GetCurrentPadding(this, ByRef NumPaddingFrames)
VA_IAudioClient_IsFormatSupported(this, ShareMode, Format, ByRef ClosestMatch)
VA_IAudioClient_GetMixFormat(this, ByRef Format)
VA_IAudioClient_GetDevicePeriod(this, ByRef DefaultDevicePeriod, ByRef MinimumDevicePeriod)
VA_IAudioClient_Start(this)
VA_IAudioClient_Stop(this)
VA_IAudioClient_Reset(this)
VA_IAudioClient_SetEventHandle(this, eventHandle)
VA_IAudioClient_GetService(this, iid, ByRef Service)
VA_IAudioSessionControl_GetState(this, ByRef State)
VA_IAudioSessionControl_GetDisplayName(this, ByRef DisplayName)
VA_IAudioSessionControl_SetDisplayName(this, DisplayName, EventContext)
VA_IAudioSessionControl_GetIconPath(this, ByRef IconPath)
VA_IAudioSessionControl_SetIconPath(this, IconPath)
VA_IAudioSessionControl_GetGroupingParam(this, ByRef Param)
VA_IAudioSessionControl_SetGroupingParam(this, Param, EventContext)
VA_IAudioSessionControl_RegisterAudioSessionNotification(this, NewNotifications)
VA_IAudioSessionControl_UnregisterAudioSessionNotification(this, NewNotifications)
VA_IAudioSessionManager_GetAudioSessionControl(this, AudioSessionGuid)
VA_IAudioSessionManager_GetSimpleAudioVolume(this, AudioSessionGuid, StreamFlags, ByRef AudioVolume)
VA_IAudioSessionControl2_GetSessionIdentifier(this, ByRef id)
VA_IAudioSessionControl2_GetSessionInstanceIdentifier(this, ByRef id)
VA_IAudioSessionControl2_GetProcessId(this, ByRef pid)
VA_IAudioSessionControl2_IsSystemSoundsSession(this)
VA_IAudioSessionControl2_SetDuckingPreference(this, OptOut)
VA_IAudioSessionManager2_GetSessionEnumerator(this, ByRef SessionEnum)
VA_IAudioSessionManager2_RegisterSessionNotification(this, SessionNotification)
VA_IAudioSessionManager2_UnregisterSessionNotification(this, SessionNotification)
VA_IAudioSessionManager2_RegisterDuckNotification(this, SessionNotification)
VA_IAudioSessionManager2_UnregisterDuckNotification(this, SessionNotification)
VA_IAudioSessionEnumerator_GetCount(this, ByRef SessionCount)
VA_IAudioSessionEnumerator_GetSession(this, SessionCount, ByRef Session)


[WaitForIEPageLoad.ahk]
IE_DocumentComplete(prms, sink)
IEReady(hIESvr = 0)


[WatchDirectory.ahk]
RegisterChanges(action,folder,file)
WatchDirectory(WatchFolder="", WatchSubDirs=true)


[Win.ahk]
Win_Animate(Hwnd, Type="", Time=100)
Win_FromPoint(X="mouse", Y="")
Win_Get(Hwnd, pQ="", ByRef o1="", ByRef o2="", ByRef o3="", ByRef o4="", ByRef o5="", ByRef o6="", ByRef o7="", ByRef o8="", ByRef o9="")
Win_GetRect(hwnd, pQ="", ByRef o1="", ByRef o2="", ByRef o3="", ByRef o4="")
Win_GetChildren(Hwnd)
Win_GetClassNN(HCtrl, HRoot="")
Win_Is(Hwnd, pQ="win")
Win_Move(Hwnd, X="", Y="", W="", H="", Flags="")
Win_MoveDelta( Hwnd, Xd="", Yd="", Wd="", Hd="", Flags="" )
Win_Recall(Options, Hwnd="", IniFileName="")
(Hwnd>0 && Hwnd <= 99)
Win_Redraw( Hwnd=0, Option="" )
Win_SetCaption(Hwnd, Flag="^")
Win_SetMenu(Hwnd, hMenu=0)
Win_SetIcon(Hwnd, Icon="", Flag=1)
Win_SetParent(Hwnd, HParent=0, bFixStyle=false)
Win_SetOwner(Hwnd, hOwner)
Win_SetToolWindow(Hwnd, Flag="^")
Win_Show(Hwnd, bShow=true)
Win_ShowSysMenu(Hwnd, X="mouse", Y="")
	MyWindowProc(hwnd, uMsg, wParam, lParam)
Win_Subclass(Hwnd, Fun, Opt="", ByRef $WndProc="")


[WinGetAll.ahk]
WinGetAll(Which="Title", DetectHidden="Off")


[WinSock2.ahk]
WS2_Connect(lpszUrl)
WS2_AsyncSelect(Ws2_Socket,UDF,WindowMessage="")
WS2_SendData(WS2_Socket, StringToSend)
WS2_SendDataEx(WS2_Socket, DataToSend, DataLength)
WS2_SendNumber(WS2_Socket, Num, Type="UInt")
WS2_CleanUp()
WS2_Disconnect(WS2_Socket)
__WSA_ScriptInit()
__WSA_Startup()
__WSA_Socket()
__WSA_Connect()
__WSA_GetHostByName(url)
__WSA_GetLastError(txt=1)
__WSA_recv(wParam, lParam)
__WSA_send(__WSA_Socket, __WSA_Data, __WSA_DataLen)
__WSA_CloseSocket(__WSA_Socket)
__WSA_GetThisScriptHandle()
__WinINet_InternetCrackURL(lpszUrl,arrayName="URL")


[WinTraymin.ahk]
WM_NCHITTEST()
WM_SHELLHOOKMESSAGE(wParam, lParam, nMsg)
WinTraymin(hWnd = "", nFlags = "")


[ws.ahk]
WS_HandleEvents(socket, events="READ ACCEPT CONNECT CLOSE")
WS_Proc(wParam, lParam, msg, hwnd)
WS_DefProc(socket, event)
WS_MessageSize(socket)
WS_GetAddrInfo(socket, hostname_or_ip, port, byref sockaddr, byref sockaddrlen)
WS_Send(socket, message, len=0, flags=0)
WS_SendBinary(socket, pbuffer, len, flags=0)
WS_SendFile(socket, file, flags=0)
WS_SendTo(socket, ip, port, message, len=0, flags=0)
WS_Recv(socket, byref message, len=0, flags=0)
WS_RecvBinary(socket, byref pbuffer, len, flags=0)
WS_RecvFile(socket, file, flags=0)
WS_RecvFrom(socket, byref out_ip, byref out_port, byref message, len=0, flags=0)
WS_Connect(socket, ip, port)
WS_Accept(socket, byref out_ip, byref out_port)
WS_Bind(socket, ip, port)
WS_Listen(socket, backlog=32)
WS_GetSocketInfo(socket, byref af, byref maxsockaddr, byref minsockaddr, byref type, byref protocol)
WS_Socket(protocol="TCP", ipversion="IPv4")
WS_CloseSocket(byref socket)
WS_Startup(version = "2.0")
WS_Shutdown()
WS_Log(str, type=0)
WS_GetConsoleInput()
WS_GetLog()


[xpath.ahk]
xpath(ByRef doc, step, set = "")
xpath_save(ByRef doc, src = "")
xpath_load(ByRef doc, src = "")


